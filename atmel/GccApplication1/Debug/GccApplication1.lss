
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000015d2  00001666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016b  0080012a  0080012a  00001690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001487  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a95  00000000  00000000  00002c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b15  00000000  00000000  00003720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e0  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bb  00000000  00000000  00004f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b5 c0       	rjmp	.+362    	; 0x1ac <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ed       	ldi	r30, 0xD2	; 210
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 32       	cpi	r26, 0x2A	; 42
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	aa e2       	ldi	r26, 0x2A	; 42
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a5 39       	cpi	r26, 0x95	; 149
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	a8 d6       	rcall	.+3408   	; 0xe14 <main>
      c4:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
/////////////////////////////////////////////////


// Motor Speed Control
void SetDutyCW(double v) {
   while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

   int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	0e 94 cd 08 	call	0x119a	; 0x119a <__addsf3>
      ea:	0e 94 9d 09 	call	0x133a	; 0x133a <__fixsfsi>
   
   if(ocr > OCR_MAX)      ocr = OCR_MAX;
      ee:	67 38       	cpi	r22, 0x87	; 135
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	78 07       	cpc	r23, r24
      f4:	34 f4       	brge	.+12     	; 0x102 <SetDutyCW+0x38>
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
      f6:	6a 30       	cpi	r22, 0x0A	; 10
      f8:	71 05       	cpc	r23, r1
      fa:	2c f4       	brge	.+10     	; 0x106 <SetDutyCW+0x3c>
      fc:	6a e0       	ldi	r22, 0x0A	; 10
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	02 c0       	rjmp	.+4      	; 0x106 <SetDutyCW+0x3c>
void SetDutyCW(double v) {
   while(TCNT1  == 0);

   int ocr = v * (200. / 24.) + 200;
   
   if(ocr > OCR_MAX)      ocr = OCR_MAX;
     102:	66 e8       	ldi	r22, 0x86	; 134
     104:	71 e0       	ldi	r23, 0x01	; 1
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
   
   OCR1A = OCR3B = ocr + 8;      //1 H
     106:	cb 01       	movw	r24, r22
     108:	08 96       	adiw	r24, 0x08	; 8
     10a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     112:	9b bd       	out	0x2b, r25	; 43
     114:	8a bd       	out	0x2a, r24	; 42
   OCR1B = OCR3A = ocr - 8;      //1 L
     116:	68 50       	subi	r22, 0x08	; 8
     118:	71 09       	sbc	r23, r1
     11a:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11e:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     122:	79 bd       	out	0x29, r23	; 41
     124:	68 bd       	out	0x28, r22	; 40
     126:	08 95       	ret

00000128 <InitLS7366>:
}


void InitLS7366() {
     128:	cf 93       	push	r28
   PORTB = 0x00;
     12a:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_MDR0 | WR_REG);
     12c:	88 e8       	ldi	r24, 0x88	; 136
     12e:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPI_MasterSend>
   SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX | FILTER_CDF_1);
     132:	83 e4       	ldi	r24, 0x43	; 67
     134:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPI_MasterSend>
   PORTB = 0x01;
     138:	c1 e0       	ldi	r28, 0x01	; 1
     13a:	c8 bb       	out	0x18, r28	; 24
   
   PORTB = 0x00;
     13c:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_MDR1 | WR_REG);
     13e:	80 e9       	ldi	r24, 0x90	; 144
     140:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPI_MasterSend>
   SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPI_MasterSend>
   PORTB = 0x01;
     14a:	c8 bb       	out	0x18, r28	; 24
   
   PORTB = 0x00;
     14c:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_CNTR | CLR_REG);
     14e:	80 e2       	ldi	r24, 0x20	; 32
     150:	0e 94 c2 08 	call	0x1184	; 0x1184 <SPI_MasterSend>
   PORTB = 0x01;
     154:	c8 bb       	out	0x18, r28	; 24
}
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <getADC>:


// Get current
int getADC(char ch) {
   ADMUX = (ADMUX & 0xf0) + ch;
     15a:	97 b1       	in	r25, 0x07	; 7
     15c:	90 7f       	andi	r25, 0xF0	; 240
     15e:	89 0f       	add	r24, r25
     160:	87 b9       	out	0x07, r24	; 7
   ADCSRA |= 0x40;
     162:	36 9a       	sbi	0x06, 6	; 6
   while(!(ADCSRA & 0x10));
     164:	34 9b       	sbis	0x06, 4	; 6
     166:	fe cf       	rjmp	.-4      	; 0x164 <getADC+0xa>
   return ADC;
     168:	84 b1       	in	r24, 0x04	; 4
     16a:	95 b1       	in	r25, 0x05	; 5
}
     16c:	08 95       	ret

0000016e <__vector_18>:



ISR(USART0_RX_vect) {
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	8f 93       	push	r24
     17e:	ef 93       	push	r30
     180:	ff 93       	push	r31
   g_buf[g_BufWriteCnt++] = UDR0;
     182:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <g_BufWriteCnt>
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	8e 0f       	add	r24, r30
     18a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <g_BufWriteCnt>
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	8c b1       	in	r24, 0x0c	; 12
     192:	ea 5b       	subi	r30, 0xBA	; 186
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	80 83       	st	Z, r24
}
     198:	ff 91       	pop	r31
     19a:	ef 91       	pop	r30
     19c:	8f 91       	pop	r24
     19e:	0f 90       	pop	r0
     1a0:	0b be       	out	0x3b, r0	; 59
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	0f 90       	pop	r0
     1a8:	1f 90       	pop	r1
     1aa:	18 95       	reti

000001ac <__vector_16>:


ISR(TIMER0_OVF_vect){            // Control period: 2ms
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	0f 92       	push	r0
     1b4:	11 24       	eor	r1, r1
     1b6:	0b b6       	in	r0, 0x3b	; 59
     1b8:	0f 92       	push	r0
     1ba:	4f 92       	push	r4
     1bc:	5f 92       	push	r5
     1be:	6f 92       	push	r6
     1c0:	7f 92       	push	r7
     1c2:	8f 92       	push	r8
     1c4:	9f 92       	push	r9
     1c6:	af 92       	push	r10
     1c8:	bf 92       	push	r11
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	2f 93       	push	r18
     1d4:	3f 93       	push	r19
     1d6:	4f 93       	push	r20
     1d8:	5f 93       	push	r21
     1da:	6f 93       	push	r22
     1dc:	7f 93       	push	r23
     1de:	8f 93       	push	r24
     1e0:	9f 93       	push	r25
     1e2:	af 93       	push	r26
     1e4:	bf 93       	push	r27
     1e6:	ef 93       	push	r30
     1e8:	ff 93       	push	r31
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <__vector_16+0x44>
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <__vector_16+0x46>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
   TCNT0 = 256 - 125;
     1f6:	83 e8       	ldi	r24, 0x83	; 131
     1f8:	82 bf       	out	0x32, r24	; 50
   
   //Read LS7366
   int32_t cnt;
   
   PORTC = 0x01;
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	25 bb       	out	0x15, r18	; 21
   
   g_ADC = getADC(0);
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	ac df       	rcall	.-168    	; 0x15a <getADC>
     202:	bc 01       	movw	r22, r24
     204:	99 0f       	add	r25, r25
     206:	88 0b       	sbc	r24, r24
     208:	99 0b       	sbc	r25, r25
     20a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__floatsisf>
     20e:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <g_ADC>
     212:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <g_ADC+0x1>
     216:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <g_ADC+0x2>
     21a:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <g_ADC+0x3>
   
   PORTB = 0x00;
     21e:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_OTR | LOAD_REG);
     220:	88 ee       	ldi	r24, 0xE8	; 232
     222:	b0 d7       	rcall	.+3936   	; 0x1184 <SPI_MasterSend>
   PORTB = 0x01;
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	88 bb       	out	0x18, r24	; 24
         
   PORTB = 0x00;
   SPI_MasterSend(SELECT_OTR | RD_REG);
     228:	18 ba       	out	0x18, r1	; 24
     22a:	88 e6       	ldi	r24, 0x68	; 104
   cnt = SPI_MasterRecv();      cnt = cnt << 8;
     22c:	ab d7       	rcall	.+3926   	; 0x1184 <SPI_MasterSend>
     22e:	af d7       	rcall	.+3934   	; 0x118e <SPI_MasterRecv>
     230:	c8 2e       	mov	r12, r24
     232:	d1 2c       	mov	r13, r1
     234:	e1 2c       	mov	r14, r1
     236:	f1 2c       	mov	r15, r1
     238:	fe 2c       	mov	r15, r14
     23a:	ed 2c       	mov	r14, r13
     23c:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();   cnt = cnt << 8;
     23e:	cc 24       	eor	r12, r12
     240:	a6 d7       	rcall	.+3916   	; 0x118e <SPI_MasterRecv>
     242:	c8 2a       	or	r12, r24
     244:	fe 2c       	mov	r15, r14
     246:	ed 2c       	mov	r14, r13
     248:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();   cnt = cnt << 8;
     24a:	cc 24       	eor	r12, r12
     24c:	a0 d7       	rcall	.+3904   	; 0x118e <SPI_MasterRecv>
     24e:	c8 2a       	or	r12, r24
     250:	fe 2c       	mov	r15, r14
     252:	ed 2c       	mov	r14, r13
     254:	dc 2c       	mov	r13, r12
   cnt |= SPI_MasterRecv();
     256:	cc 24       	eor	r12, r12
     258:	9a d7       	rcall	.+3892   	; 0x118e <SPI_MasterRecv>
   PORTB = 0x01;
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	98 bb       	out	0x18, r25	; 24
   g_Cnt = -cnt;
     25e:	c8 2a       	or	r12, r24
     260:	f0 94       	com	r15
     262:	e0 94       	com	r14
     264:	d0 94       	com	r13
     266:	c0 94       	com	r12
     268:	c1 1c       	adc	r12, r1
     26a:	d1 1c       	adc	r13, r1
     26c:	e1 1c       	adc	r14, r1
     26e:	f1 1c       	adc	r15, r1
     270:	c0 92 87 02 	sts	0x0287, r12	; 0x800287 <g_Cnt>
     274:	d0 92 88 02 	sts	0x0288, r13	; 0x800288 <g_Cnt+0x1>
     278:	e0 92 89 02 	sts	0x0289, r14	; 0x800289 <g_Cnt+0x2>
     27c:	f0 92 8a 02 	sts	0x028A, r15	; 0x80028a <g_Cnt+0x3>
   
   PORTC = 0x03;
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	85 bb       	out	0x15, r24	; 21
   
   // Read Current Angle [rad]
   // radian to degree (PI*360)
   g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI;
     284:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <g_Cnt>
     288:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <g_Cnt+0x1>
     28c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <g_Cnt+0x2>
     290:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <g_Cnt+0x3>
     294:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__floatsisf>
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	42 ea       	ldi	r20, 0xA2	; 162
     29e:	58 e4       	ldi	r21, 0x48	; 72
     2a0:	e4 d7       	rcall	.+4040   	; 0x126a <__divsf3>
     2a2:	9b 01       	movw	r18, r22
     2a4:	ac 01       	movw	r20, r24
     2a6:	79 d7       	rcall	.+3826   	; 0x119a <__addsf3>
     2a8:	2b ed       	ldi	r18, 0xDB	; 219
     2aa:	3f e0       	ldi	r19, 0x0F	; 15
     2ac:	49 e4       	ldi	r20, 0x49	; 73
     2ae:	50 e4       	ldi	r21, 0x40	; 64
     2b0:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
     2b4:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Pcur>
     2b8:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Pcur+0x1>
     2bc:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Pcur+0x2>
     2c0:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Pcur+0x3>
   
   // 360도 예외처리
   if (g_Pcur > 360.) g_Pcur -= 360.;
     2c4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     2c8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     2cc:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     2d0:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	44 eb       	ldi	r20, 0xB4	; 180
     2da:	53 e4       	ldi	r21, 0x43	; 67
     2dc:	0e 94 80 0a 	call	0x1500	; 0x1500 <__gesf2>
     2e0:	18 16       	cp	r1, r24
     2e2:	b4 f4       	brge	.+44     	; 0x310 <__vector_16+0x164>
     2e4:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     2e8:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     2ec:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     2f0:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	44 eb       	ldi	r20, 0xB4	; 180
     2fa:	53 e4       	ldi	r21, 0x43	; 67
     2fc:	4d d7       	rcall	.+3738   	; 0x1198 <__subsf3>
     2fe:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Pcur>
     302:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Pcur+0x1>
     306:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Pcur+0x2>
     30a:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Pcur+0x3>
     30e:	24 c0       	rjmp	.+72     	; 0x358 <__vector_16+0x1ac>
   else if (g_Pcur < -360.) g_Pcur += 360.;
     310:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     314:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     318:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     31c:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     320:	20 e0       	ldi	r18, 0x00	; 0
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	44 eb       	ldi	r20, 0xB4	; 180
     326:	53 ec       	ldi	r21, 0xC3	; 195
     328:	9c d7       	rcall	.+3896   	; 0x1262 <__cmpsf2>
     32a:	88 23       	and	r24, r24
     32c:	ac f4       	brge	.+42     	; 0x358 <__vector_16+0x1ac>
     32e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     332:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     336:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     33a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	44 eb       	ldi	r20, 0xB4	; 180
     344:	53 e4       	ldi	r21, 0x43	; 67
     346:	29 d7       	rcall	.+3666   	; 0x119a <__addsf3>
     348:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Pcur>
     34c:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Pcur+0x1>
     350:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Pcur+0x2>
     354:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Pcur+0x3>
   
   if ((g_TimerCnt % 10) == 0) {
     358:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <g_TimerCnt>
     35c:	8d ec       	ldi	r24, 0xCD	; 205
     35e:	28 9f       	mul	r18, r24
     360:	81 2d       	mov	r24, r1
     362:	11 24       	eor	r1, r1
     364:	86 95       	lsr	r24
     366:	86 95       	lsr	r24
     368:	86 95       	lsr	r24
     36a:	88 0f       	add	r24, r24
     36c:	98 2f       	mov	r25, r24
     36e:	99 0f       	add	r25, r25
     370:	99 0f       	add	r25, r25
     372:	89 0f       	add	r24, r25
     374:	28 13       	cpse	r18, r24
     376:	40 c0       	rjmp	.+128    	; 0x3f8 <__vector_16+0x24c>
      g_Vcur = (g_Pcur - g_Pvcur) / (dt * 10.0);
     378:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
     37c:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
     380:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
     384:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
     388:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <g_Pvcur>
     38c:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <g_Pvcur+0x1>
     390:	40 91 92 02 	lds	r20, 0x0292	; 0x800292 <g_Pvcur+0x2>
     394:	50 91 93 02 	lds	r21, 0x0293	; 0x800293 <g_Pvcur+0x3>
     398:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <dt>
     39c:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <dt+0x1>
     3a0:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <dt+0x2>
     3a4:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <dt+0x3>
     3a8:	f7 d6       	rcall	.+3566   	; 0x1198 <__subsf3>
     3aa:	6b 01       	movw	r12, r22
     3ac:	7c 01       	movw	r14, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e2       	ldi	r20, 0x20	; 32
     3b4:	51 e4       	ldi	r21, 0x41	; 65
     3b6:	c5 01       	movw	r24, r10
     3b8:	b4 01       	movw	r22, r8
     3ba:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
     3be:	9b 01       	movw	r18, r22
     3c0:	ac 01       	movw	r20, r24
     3c2:	c7 01       	movw	r24, r14
     3c4:	b6 01       	movw	r22, r12
     3c6:	51 d7       	rcall	.+3746   	; 0x126a <__divsf3>
     3c8:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <g_Vcur>
     3cc:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <g_Vcur+0x1>
     3d0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <g_Vcur+0x2>
     3d4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <g_Vcur+0x3>
      g_Pvcur = g_Pcur;
     3d8:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_Pcur>
     3dc:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_Pcur+0x1>
     3e0:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <g_Pcur+0x2>
     3e4:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <g_Pcur+0x3>
     3e8:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <g_Pvcur>
     3ec:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <g_Pvcur+0x1>
     3f0:	a0 93 92 02 	sts	0x0292, r26	; 0x800292 <g_Pvcur+0x2>
   }
   
   // Read Current
   g_ADC = getADC(0);
     3f4:	b0 93 93 02 	sts	0x0293, r27	; 0x800293 <g_Pvcur+0x3>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	af de       	rcall	.-674    	; 0x15a <getADC>
     3fc:	bc 01       	movw	r22, r24
     3fe:	99 0f       	add	r25, r25
     400:	88 0b       	sbc	r24, r24
     402:	99 0b       	sbc	r25, r25
     404:	cd d7       	rcall	.+3994   	; 0x13a0 <__floatsisf>
     406:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <g_ADC>
     40a:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <g_ADC+0x1>
     40e:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <g_ADC+0x2>
     412:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <g_ADC+0x3>
   g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.488) * 10.);
     416:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <g_ADC>
     41a:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <g_ADC+0x1>
     41e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <g_ADC+0x2>
     422:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <g_ADC+0x3>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e8       	ldi	r20, 0x80	; 128
     42c:	5a e3       	ldi	r21, 0x3A	; 58
     42e:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	40 ea       	ldi	r20, 0xA0	; 160
     438:	50 e4       	ldi	r21, 0x40	; 64
     43a:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
     43e:	24 e6       	ldi	r18, 0x64	; 100
     440:	3b e3       	ldi	r19, 0x3B	; 59
     442:	4f e1       	ldi	r20, 0x1F	; 31
     444:	50 e4       	ldi	r21, 0x40	; 64
     446:	a8 d6       	rcall	.+3408   	; 0x1198 <__subsf3>
     448:	20 e0       	ldi	r18, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	40 e2       	ldi	r20, 0x20	; 32
     44e:	51 e4       	ldi	r21, 0x41	; 65
     450:	0e 94 84 0a 	call	0x1508	; 0x1508 <__mulsf3>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	b0 58       	subi	r27, 0x80	; 128
     45a:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <g_Ccur>
     45e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <g_Ccur+0x1>
     462:	a0 93 56 02 	sts	0x0256, r26	; 0x800256 <g_Ccur+0x2>
     466:	b0 93 57 02 	sts	0x0257, r27	; 0x800257 <g_Ccur+0x3>
   //////////////////////////////////////////////////
   //////////          Controller          //////////
   //////////////////////////////////////////////////
   
   // Position Control // PD Controller
   if((g_TimerCnt % 100) == 0){
     46a:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_TimerCnt>
     46e:	89 e2       	ldi	r24, 0x29	; 41
     470:	98 9f       	mul	r25, r24
     472:	81 2d       	mov	r24, r1
     474:	11 24       	eor	r1, r1
     476:	82 95       	swap	r24
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	a4 e6       	ldi	r26, 0x64	; 100
     47c:	8a 9f       	mul	r24, r26
     47e:	90 19       	sub	r25, r0
     480:	11 24       	eor	r1, r1
     482:	91 11       	cpse	r25, r1
     484:	70 c1       	rjmp	.+736    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
      g_Perr = g_Pdes - g_Pcur;
     486:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <g_Pdes>
     48a:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <g_Pdes+0x1>
     48e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <g_Pdes+0x2>
     492:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <g_Pdes+0x3>
     496:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <g_Pcur>
     49a:	30 91 8d 02 	lds	r19, 0x028D	; 0x80028d <g_Pcur+0x1>
     49e:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <g_Pcur+0x2>
     4a2:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <g_Pcur+0x3>
     4a6:	78 d6       	rcall	.+3312   	; 0x1198 <__subsf3>
     4a8:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <g_Perr>
     4ac:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <g_Perr+0x1>
     4b0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Perr+0x2>
     4b4:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Perr+0x3>
      while(g_Perr > 180 * M_PI / 180.){
     4b8:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     4bc:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     4c0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     4c4:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     4c8:	2b ed       	ldi	r18, 0xDB	; 219
     4ca:	3f e0       	ldi	r19, 0x0F	; 15
     4cc:	49 e4       	ldi	r20, 0x49	; 73
     4ce:	50 e4       	ldi	r21, 0x40	; 64
     4d0:	0e 94 80 0a 	call	0x1500	; 0x1500 <__gesf2>
     4d4:	18 16       	cp	r1, r24
     4d6:	24 f5       	brge	.+72     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
         g_Perr -= 360 * M_PI / 180.;
     4d8:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     4dc:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     4e0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     4e4:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     4e8:	2b ed       	ldi	r18, 0xDB	; 219
     4ea:	3f e0       	ldi	r19, 0x0F	; 15
     4ec:	49 ec       	ldi	r20, 0xC9	; 201
     4ee:	50 e4       	ldi	r21, 0x40	; 64
     4f0:	53 d6       	rcall	.+3238   	; 0x1198 <__subsf3>
     4f2:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <g_Perr>
     4f6:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <g_Perr+0x1>
     4fa:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Perr+0x2>
     4fe:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Perr+0x3>
   //////////////////////////////////////////////////
   
   // Position Control // PD Controller
   if((g_TimerCnt % 100) == 0){
      g_Perr = g_Pdes - g_Pcur;
      while(g_Perr > 180 * M_PI / 180.){
     502:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     506:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     50a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     50e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     512:	2b ed       	ldi	r18, 0xDB	; 219
     514:	3f e0       	ldi	r19, 0x0F	; 15
     516:	49 e4       	ldi	r20, 0x49	; 73
     518:	50 e4       	ldi	r21, 0x40	; 64
     51a:	f2 d7       	rcall	.+4068   	; 0x1500 <__gesf2>
     51c:	18 16       	cp	r1, r24
     51e:	e4 f2       	brlt	.-72     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
         g_Perr -= 360 * M_PI / 180.;
      }
      while(g_Perr < -180 * M_PI / 180.){
     520:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     524:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     528:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     52c:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     530:	2b ed       	ldi	r18, 0xDB	; 219
     532:	3f e0       	ldi	r19, 0x0F	; 15
     534:	49 e4       	ldi	r20, 0x49	; 73
     536:	50 ec       	ldi	r21, 0xC0	; 192
     538:	94 d6       	rcall	.+3368   	; 0x1262 <__cmpsf2>
     53a:	88 23       	and	r24, r24
     53c:	24 f5       	brge	.+72     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
         g_Perr += 360 * M_PI / 180.;
     53e:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     542:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     546:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     54a:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     54e:	2b ed       	ldi	r18, 0xDB	; 219
     550:	3f e0       	ldi	r19, 0x0F	; 15
     552:	49 ec       	ldi	r20, 0xC9	; 201
     554:	50 e4       	ldi	r21, 0x40	; 64
     556:	21 d6       	rcall	.+3138   	; 0x119a <__addsf3>
     558:	60 93 46 02 	sts	0x0246, r22	; 0x800246 <g_Perr>
     55c:	70 93 47 02 	sts	0x0247, r23	; 0x800247 <g_Perr+0x1>
     560:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_Perr+0x2>
     564:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <g_Perr+0x3>
   if((g_TimerCnt % 100) == 0){
      g_Perr = g_Pdes - g_Pcur;
      while(g_Perr > 180 * M_PI / 180.){
         g_Perr -= 360 * M_PI / 180.;
      }
      while(g_Perr < -180 * M_PI / 180.){
     568:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     56c:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     570:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     574:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     578:	2b ed       	ldi	r18, 0xDB	; 219
     57a:	3f e0       	ldi	r19, 0x0F	; 15
     57c:	49 e4       	ldi	r20, 0x49	; 73
     57e:	50 ec       	ldi	r21, 0xC0	; 192
     580:	70 d6       	rcall	.+3296   	; 0x1262 <__cmpsf2>
     582:	88 23       	and	r24, r24
     584:	e4 f2       	brlt	.-72     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     586:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Kp_p>
         g_Perr += 360 * M_PI / 180.;
      }
      g_pos_control = Kp_p*g_Perr + Kd_p*(g_Perr-g_Pperr)/(dt * 100); // PD Controll
     58a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Kp_p+0x1>
     58e:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <Kp_p+0x2>
     592:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <Kp_p+0x3>
     596:	89 83       	std	Y+1, r24	; 0x01
     598:	9a 83       	std	Y+2, r25	; 0x02
     59a:	ab 83       	std	Y+3, r26	; 0x03
     59c:	bc 83       	std	Y+4, r27	; 0x04
     59e:	c0 90 46 02 	lds	r12, 0x0246	; 0x800246 <g_Perr>
     5a2:	d0 90 47 02 	lds	r13, 0x0247	; 0x800247 <g_Perr+0x1>
     5a6:	e0 90 48 02 	lds	r14, 0x0248	; 0x800248 <g_Perr+0x2>
     5aa:	f0 90 49 02 	lds	r15, 0x0249	; 0x800249 <g_Perr+0x3>
     5ae:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <g_Perr>
     5b2:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <g_Perr+0x1>
     5b6:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_Perr+0x2>
     5ba:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <g_Perr+0x3>
     5be:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <g_Pperr>
     5c2:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <g_Pperr+0x1>
     5c6:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <g_Pperr+0x2>
     5ca:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <g_Pperr+0x3>
     5ce:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5d2:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5d6:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     5da:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     5de:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <dt>
     5e2:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <dt+0x1>
     5e6:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <dt+0x2>
     5ea:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <dt+0x3>
     5ee:	d4 d5       	rcall	.+2984   	; 0x1198 <__subsf3>
     5f0:	a5 01       	movw	r20, r10
     5f2:	94 01       	movw	r18, r8
     5f4:	89 d7       	rcall	.+3858   	; 0x1508 <__mulsf3>
     5f6:	4b 01       	movw	r8, r22
     5f8:	5c 01       	movw	r10, r24
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	48 ec       	ldi	r20, 0xC8	; 200
     600:	52 e4       	ldi	r21, 0x42	; 66
     602:	c3 01       	movw	r24, r6
     604:	b2 01       	movw	r22, r4
     606:	80 d7       	rcall	.+3840   	; 0x1508 <__mulsf3>
     608:	9b 01       	movw	r18, r22
     60a:	ac 01       	movw	r20, r24
     60c:	c5 01       	movw	r24, r10
     60e:	b4 01       	movw	r22, r8
     610:	2c d6       	rcall	.+3160   	; 0x126a <__divsf3>
     612:	4b 01       	movw	r8, r22
     614:	5c 01       	movw	r10, r24
     616:	a7 01       	movw	r20, r14
     618:	96 01       	movw	r18, r12
     61a:	69 81       	ldd	r22, Y+1	; 0x01
     61c:	7a 81       	ldd	r23, Y+2	; 0x02
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	72 d7       	rcall	.+3812   	; 0x1508 <__mulsf3>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	c5 01       	movw	r24, r10
     62a:	b4 01       	movw	r22, r8
     62c:	b6 d5       	rcall	.+2924   	; 0x119a <__addsf3>
     62e:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <g_pos_control>
     632:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <g_pos_control+0x1>
     636:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <g_pos_control+0x2>
     63a:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <g_pos_control+0x3>
     63e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <g_Perr>
      g_Pperr = g_Perr; // 현재 에러값 저장
     642:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <g_Perr+0x1>
     646:	a0 91 48 02 	lds	r26, 0x0248	; 0x800248 <g_Perr+0x2>
     64a:	b0 91 49 02 	lds	r27, 0x0249	; 0x800249 <g_Perr+0x3>
     64e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <g_Pperr>
     652:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <g_Pperr+0x1>
     656:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <g_Pperr+0x2>
     65a:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <g_Pperr+0x3>
      
      if(g_pos_control > 642.){
     65e:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     662:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     666:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     66a:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e8       	ldi	r19, 0x80	; 128
     672:	40 e2       	ldi	r20, 0x20	; 32
     674:	54 e4       	ldi	r21, 0x44	; 68
     676:	44 d7       	rcall	.+3720   	; 0x1500 <__gesf2>
     678:	18 16       	cp	r1, r24
     67a:	6c f4       	brge	.+26     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     67c:	80 e0       	ldi	r24, 0x00	; 0
         g_pos_control = 642.;
     67e:	90 e8       	ldi	r25, 0x80	; 128
     680:	a0 e2       	ldi	r26, 0x20	; 32
     682:	b4 e4       	ldi	r27, 0x44	; 68
     684:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     688:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     68c:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     690:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
     694:	1b c0       	rjmp	.+54     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
      }
      else if(g_pos_control < -642.){
     696:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     69a:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     69e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     6a2:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e8       	ldi	r19, 0x80	; 128
     6aa:	40 e2       	ldi	r20, 0x20	; 32
     6ac:	54 ec       	ldi	r21, 0xC4	; 196
     6ae:	d9 d5       	rcall	.+2994   	; 0x1262 <__cmpsf2>
     6b0:	88 23       	and	r24, r24
     6b2:	64 f4       	brge	.+24     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
         g_pos_control = -642.;
     6b6:	90 e8       	ldi	r25, 0x80	; 128
     6b8:	a0 e2       	ldi	r26, 0x20	; 32
     6ba:	b4 ec       	ldi	r27, 0xC4	; 196
     6bc:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     6c0:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     6c4:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     6c8:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
      }
      // User Angluar Velocity Saturation
      if(g_pos_control > V_limit){
     6cc:	60 91 7f 02 	lds	r22, 0x027F	; 0x80027f <g_pos_control>
     6d0:	70 91 80 02 	lds	r23, 0x0280	; 0x800280 <g_pos_control+0x1>
     6d4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <g_pos_control+0x2>
     6d8:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <g_pos_control+0x3>
     6dc:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <V_limit>
     6e0:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <V_limit+0x1>
     6e4:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <V_limit+0x2>
     6e8:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <V_limit+0x3>
     6ec:	09 d7       	rcall	.+3602   	; 0x1500 <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	8c f4       	brge	.+34     	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     6f2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <V_limit>
         g_pos_control = V_limit;
     6f6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <V_limit+0x1>
     6fa:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <V_limit+0x2>
     6fe:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <V_limit+0x3>
     702:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     706:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     70a:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     70e:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
     712:	27 c0       	rjmp	.+78     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
      }
      else if(g_pos_control < -V_limit){
     714:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <V_limit>
     718:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <V_limit+0x1>
     71c:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <V_limit+0x2>
     720:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <V_limit+0x3>
     724:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <g_pos_control>
     728:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <g_pos_control+0x1>
     72c:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <g_pos_control+0x2>
     730:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <g_pos_control+0x3>
     734:	bc 01       	movw	r22, r24
     736:	cd 01       	movw	r24, r26
     738:	90 58       	subi	r25, 0x80	; 128
     73a:	e2 d6       	rcall	.+3524   	; 0x1500 <__gesf2>
     73c:	18 16       	cp	r1, r24
     73e:	8c f4       	brge	.+34     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     740:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <V_limit>
         g_pos_control = -V_limit;
     744:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <V_limit+0x1>
     748:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <V_limit+0x2>
     74c:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <V_limit+0x3>
     750:	b0 58       	subi	r27, 0x80	; 128
     752:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <g_pos_control>
     756:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <g_pos_control+0x1>
     75a:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <g_pos_control+0x2>
     75e:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <g_pos_control+0x3>
     762:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <g_TimerCnt>
      }
      g_TimerCnt = 0;
     766:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <g_TimerCnt>

   }
   
   /////////////////////////////////////
   // Velocity Control // PI Controller
   if((g_TimerCnt % 10) == 0){
     76a:	8d ec       	ldi	r24, 0xCD	; 205
     76c:	28 9f       	mul	r18, r24
     76e:	81 2d       	mov	r24, r1
     770:	11 24       	eor	r1, r1
     772:	86 95       	lsr	r24
     774:	86 95       	lsr	r24
     776:	86 95       	lsr	r24
     778:	88 0f       	add	r24, r24
     77a:	98 2f       	mov	r25, r24
     77c:	99 0f       	add	r25, r25
     77e:	99 0f       	add	r25, r25
     780:	89 0f       	add	r24, r25
     782:	28 13       	cpse	r18, r24
     784:	d3 c1       	rjmp	.+934    	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     786:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <g_pos_control>
      g_Vdes = g_pos_control;
     78a:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <g_pos_control+0x1>
     78e:	a0 91 81 02 	lds	r26, 0x0281	; 0x800281 <g_pos_control+0x2>
     792:	b0 91 82 02 	lds	r27, 0x0282	; 0x800282 <g_pos_control+0x3>
     796:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <g_Vdes>
     79a:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <g_Vdes+0x1>
     79e:	a0 93 27 01 	sts	0x0127, r26	; 0x800127 <g_Vdes+0x2>
     7a2:	b0 93 28 01 	sts	0x0128, r27	; 0x800128 <g_Vdes+0x3>
      g_Verr = g_Vdes - g_Vcur;
     7a6:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <g_Vdes>
     7aa:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <g_Vdes+0x1>
     7ae:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <g_Vdes+0x2>
     7b2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <g_Vdes+0x3>
     7b6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <g_Vcur>
     7ba:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <g_Vcur+0x1>
     7be:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <g_Vcur+0x2>
     7c2:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <g_Vcur+0x3>
     7c6:	e8 d4       	rcall	.+2512   	; 0x1198 <__subsf3>
     7c8:	60 93 83 02 	sts	0x0283, r22	; 0x800283 <g_Verr>
     7cc:	70 93 84 02 	sts	0x0284, r23	; 0x800284 <g_Verr+0x1>
     7d0:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <g_Verr+0x2>
     7d4:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <g_Verr+0x3>
     7d8:	80 90 83 02 	lds	r8, 0x0283	; 0x800283 <g_Verr>
      g_vel_control = g_Verr * Kp_v + V_err_sum * Ki_v * (dt *10 ); // PI Controll
     7dc:	90 90 84 02 	lds	r9, 0x0284	; 0x800284 <g_Verr+0x1>
     7e0:	a0 90 85 02 	lds	r10, 0x0285	; 0x800285 <g_Verr+0x2>
     7e4:	b0 90 86 02 	lds	r11, 0x0286	; 0x800286 <g_Verr+0x3>
     7e8:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <Kp_v>
     7ec:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <Kp_v+0x1>
     7f0:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <Kp_v+0x2>
     7f4:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <Kp_v+0x3>
     7f8:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <V_err_sum>
     7fc:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <V_err_sum+0x1>
     800:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <V_err_sum+0x2>
     804:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <V_err_sum+0x3>
     808:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Ki_v>
     80c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Ki_v+0x1>
     810:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Ki_v+0x2>
     814:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Ki_v+0x3>
     818:	40 90 18 01 	lds	r4, 0x0118	; 0x800118 <dt>
     81c:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <dt+0x1>
     820:	60 90 1a 01 	lds	r6, 0x011A	; 0x80011a <dt+0x2>
     824:	70 90 1b 01 	lds	r7, 0x011B	; 0x80011b <dt+0x3>
     828:	6f d6       	rcall	.+3294   	; 0x1508 <__mulsf3>
     82a:	69 83       	std	Y+1, r22	; 0x01
     82c:	7a 83       	std	Y+2, r23	; 0x02
     82e:	8b 83       	std	Y+3, r24	; 0x03
     830:	9c 83       	std	Y+4, r25	; 0x04
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e2       	ldi	r20, 0x20	; 32
     838:	51 e4       	ldi	r21, 0x41	; 65
     83a:	c3 01       	movw	r24, r6
     83c:	b2 01       	movw	r22, r4
     83e:	64 d6       	rcall	.+3272   	; 0x1508 <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	5d d6       	rcall	.+3258   	; 0x1508 <__mulsf3>
     84e:	2b 01       	movw	r4, r22
     850:	3c 01       	movw	r6, r24
     852:	a7 01       	movw	r20, r14
     854:	96 01       	movw	r18, r12
     856:	c5 01       	movw	r24, r10
     858:	b4 01       	movw	r22, r8
     85a:	56 d6       	rcall	.+3244   	; 0x1508 <__mulsf3>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c3 01       	movw	r24, r6
     862:	b2 01       	movw	r22, r4
     864:	9a d4       	rcall	.+2356   	; 0x119a <__addsf3>
     866:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <g_vel_control>
     86a:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <g_vel_control+0x1>
     86e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <g_vel_control+0x2>
     872:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <g_vel_control+0x3>
      V_err_sum += g_Verr;
     876:	60 91 83 02 	lds	r22, 0x0283	; 0x800283 <g_Verr>
     87a:	70 91 84 02 	lds	r23, 0x0284	; 0x800284 <g_Verr+0x1>
     87e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <g_Verr+0x2>
     882:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <g_Verr+0x3>
     886:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <V_err_sum>
     88a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <V_err_sum+0x1>
     88e:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <V_err_sum+0x2>
     892:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <V_err_sum+0x3>
     896:	81 d4       	rcall	.+2306   	; 0x119a <__addsf3>
     898:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <V_err_sum>
     89c:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <V_err_sum+0x1>
     8a0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <V_err_sum+0x2>
     8a4:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <V_err_sum+0x3>
      
      
      // 모터 속도 limit
      if(g_vel_control > 2.08){
     8a8:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     8ac:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     8b0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     8b4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     8b8:	28 eb       	ldi	r18, 0xB8	; 184
     8ba:	3e e1       	ldi	r19, 0x1E	; 30
     8bc:	45 e0       	ldi	r20, 0x05	; 5
     8be:	50 e4       	ldi	r21, 0x40	; 64
     8c0:	1f d6       	rcall	.+3134   	; 0x1500 <__gesf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	0c f0       	brlt	.+2      	; 0x8c8 <__LOCK_REGION_LENGTH__+0x4c8>
         V_err_sum -= (g_vel_control - 2.08) * 1. / Kp_v / 3.;
     8c6:	3f c0       	rjmp	.+126    	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     8c8:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     8cc:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     8d0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     8d4:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     8d8:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_v>
     8dc:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_v+0x1>
     8e0:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_v+0x2>
     8e4:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_v+0x3>
     8e8:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <V_err_sum>
     8ec:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <V_err_sum+0x1>
     8f0:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <V_err_sum+0x2>
     8f4:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <V_err_sum+0x3>
     8f8:	28 eb       	ldi	r18, 0xB8	; 184
     8fa:	3e e1       	ldi	r19, 0x1E	; 30
     8fc:	45 e0       	ldi	r20, 0x05	; 5
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	4b d4       	rcall	.+2198   	; 0x1198 <__subsf3>
     902:	a5 01       	movw	r20, r10
     904:	94 01       	movw	r18, r8
     906:	b1 d4       	rcall	.+2402   	; 0x126a <__divsf3>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e4       	ldi	r20, 0x40	; 64
     90e:	50 e4       	ldi	r21, 0x40	; 64
     910:	ac d4       	rcall	.+2392   	; 0x126a <__divsf3>
     912:	9b 01       	movw	r18, r22
     914:	ac 01       	movw	r20, r24
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	3e d4       	rcall	.+2172   	; 0x1198 <__subsf3>
     91c:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <V_err_sum>
     920:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <V_err_sum+0x1>
     924:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <V_err_sum+0x2>
     928:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <V_err_sum+0x3>
         g_vel_control = 2.08;
     92c:	88 eb       	ldi	r24, 0xB8	; 184
     92e:	9e e1       	ldi	r25, 0x1E	; 30
     930:	a5 e0       	ldi	r26, 0x05	; 5
     932:	b0 e4       	ldi	r27, 0x40	; 64
     934:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     938:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     93c:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     940:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     944:	4e c0       	rjmp	.+156    	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
      }
      else if(g_vel_control < -2.08){
     946:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     94a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     94e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     952:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     956:	28 eb       	ldi	r18, 0xB8	; 184
     958:	3e e1       	ldi	r19, 0x1E	; 30
     95a:	45 e0       	ldi	r20, 0x05	; 5
     95c:	50 ec       	ldi	r21, 0xC0	; 192
     95e:	81 d4       	rcall	.+2306   	; 0x1262 <__cmpsf2>
     960:	88 23       	and	r24, r24
     962:	0c f0       	brlt	.+2      	; 0x966 <__LOCK_REGION_LENGTH__+0x566>
         V_err_sum -= (g_vel_control + 2.08) * 1. / Kp_v / 3.;
     964:	3e c0       	rjmp	.+124    	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
     966:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     96a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     96e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     972:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     976:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_v>
     97a:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_v+0x1>
     97e:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_v+0x2>
     982:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_v+0x3>
     986:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <V_err_sum>
     98a:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <V_err_sum+0x1>
     98e:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <V_err_sum+0x2>
     992:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <V_err_sum+0x3>
     996:	28 eb       	ldi	r18, 0xB8	; 184
     998:	3e e1       	ldi	r19, 0x1E	; 30
     99a:	45 e0       	ldi	r20, 0x05	; 5
     99c:	50 e4       	ldi	r21, 0x40	; 64
     99e:	fd d3       	rcall	.+2042   	; 0x119a <__addsf3>
     9a0:	a5 01       	movw	r20, r10
     9a2:	94 01       	movw	r18, r8
     9a4:	62 d4       	rcall	.+2244   	; 0x126a <__divsf3>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e4       	ldi	r20, 0x40	; 64
     9ac:	50 e4       	ldi	r21, 0x40	; 64
     9ae:	5d d4       	rcall	.+2234   	; 0x126a <__divsf3>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	c7 01       	movw	r24, r14
     9b6:	b6 01       	movw	r22, r12
     9b8:	ef d3       	rcall	.+2014   	; 0x1198 <__subsf3>
     9ba:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <V_err_sum>
     9be:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <V_err_sum+0x1>
     9c2:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <V_err_sum+0x2>
     9c6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <V_err_sum+0x3>
     9ca:	88 eb       	ldi	r24, 0xB8	; 184
     9cc:	9e e1       	ldi	r25, 0x1E	; 30
         g_vel_control = -2.08;
     9ce:	a5 e0       	ldi	r26, 0x05	; 5
     9d0:	b0 ec       	ldi	r27, 0xC0	; 192
     9d2:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     9d6:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     9da:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     9de:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     9e2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <g_Vdes>
      }
      
      // Saturation을 이용한 오차 누적 방지
      // Anti-Windup
      V_seturation = g_Vdes;
     9e6:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <g_Vdes+0x1>
     9ea:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <g_Vdes+0x2>
     9ee:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <g_Vdes+0x3>
     9f2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
     9f6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
     9fa:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <__data_end+0x2>
     9fe:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <__data_end+0x3>
     a02:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <V_err_sum>
      if(V_err_sum > V_seturation) V_err_sum = V_seturation;
     a06:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <V_err_sum+0x1>
     a0a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <V_err_sum+0x2>
     a0e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <V_err_sum+0x3>
     a12:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end>
     a16:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <__data_end+0x1>
     a1a:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <__data_end+0x2>
     a1e:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <__data_end+0x3>
     a22:	6e d5       	rcall	.+2780   	; 0x1500 <__gesf2>
     a24:	18 16       	cp	r1, r24
     a26:	84 f4       	brge	.+32     	; 0xa48 <__LOCK_REGION_LENGTH__+0x648>
     a28:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     a2c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     a30:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__data_end+0x2>
     a34:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__data_end+0x3>
     a38:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <V_err_sum>
     a3c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <V_err_sum+0x1>
     a40:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <V_err_sum+0x2>
     a44:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <V_err_sum+0x3>
     a48:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
      if(V_err_sum < -V_seturation) V_err_sum = -V_seturation;
     a4c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     a50:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__data_end+0x2>
     a54:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__data_end+0x3>
     a58:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <V_err_sum>
     a5c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <V_err_sum+0x1>
     a60:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <V_err_sum+0x2>
     a64:	50 91 31 01 	lds	r21, 0x0131	; 0x800131 <V_err_sum+0x3>
     a68:	bc 01       	movw	r22, r24
     a6a:	cd 01       	movw	r24, r26
     a6c:	90 58       	subi	r25, 0x80	; 128
     a6e:	48 d5       	rcall	.+2704   	; 0x1500 <__gesf2>
     a70:	18 16       	cp	r1, r24
     a72:	8c f4       	brge	.+34     	; 0xa96 <__LOCK_REGION_LENGTH__+0x696>
     a74:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
     a78:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
     a7c:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <__data_end+0x2>
     a80:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <__data_end+0x3>
     a84:	b0 58       	subi	r27, 0x80	; 128
     a86:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <V_err_sum>
     a8a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <V_err_sum+0x1>
     a8e:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <V_err_sum+0x2>
     a92:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <V_err_sum+0x3>
     a96:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
      
      // 모터의 최대 Current를 넘지 않게 하기 위함
      if(g_vel_control > C_limit){
     a9a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     a9e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     aa2:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     aa6:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <C_limit>
     aaa:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <C_limit+0x1>
     aae:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <C_limit+0x2>
     ab2:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <C_limit+0x3>
     ab6:	24 d5       	rcall	.+2632   	; 0x1500 <__gesf2>
     ab8:	18 16       	cp	r1, r24
     aba:	8c f4       	brge	.+34     	; 0xade <__LOCK_REGION_LENGTH__+0x6de>
     abc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <C_limit>
         g_vel_control = C_limit;
     ac0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <C_limit+0x1>
     ac4:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <C_limit+0x2>
     ac8:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <C_limit+0x3>
     acc:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     ad0:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     ad4:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     ad8:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     adc:	27 c0       	rjmp	.+78     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     ade:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <C_limit>
      }
      else if(g_vel_control < -C_limit){
     ae2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <C_limit+0x1>
     ae6:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <C_limit+0x2>
     aea:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <C_limit+0x3>
     aee:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <g_vel_control>
     af2:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <g_vel_control+0x1>
     af6:	40 91 78 02 	lds	r20, 0x0278	; 0x800278 <g_vel_control+0x2>
     afa:	50 91 79 02 	lds	r21, 0x0279	; 0x800279 <g_vel_control+0x3>
     afe:	bc 01       	movw	r22, r24
     b00:	cd 01       	movw	r24, r26
     b02:	90 58       	subi	r25, 0x80	; 128
     b04:	fd d4       	rcall	.+2554   	; 0x1500 <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	8c f4       	brge	.+34     	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     b0a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <C_limit>
         g_vel_control = -C_limit;
     b0e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <C_limit+0x1>
     b12:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <C_limit+0x2>
     b16:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <C_limit+0x3>
     b1a:	b0 58       	subi	r27, 0x80	; 128
     b1c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     b20:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     b24:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     b28:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     b2c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_TimerCnt>
      }
   }

   ///////////////////////////////////
   // Current Control // PI Controller
   if((g_TimerCnt % 1) == 0){
     b30:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <g_vel_control>
      g_Cdes = g_vel_control;
     b34:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <g_vel_control+0x1>
     b38:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <g_vel_control+0x2>
     b3c:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <g_vel_control+0x3>
     b40:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <g_Cdes>
     b44:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <g_Cdes+0x1>
     b48:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <g_Cdes+0x2>
     b4c:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <g_Cdes+0x3>
     b50:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <g_Cdes>
      g_Cerr = g_Cdes - g_Ccur;
     b54:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <g_Cdes+0x1>
     b58:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <g_Cdes+0x2>
     b5c:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <g_Cdes+0x3>
     b60:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <g_Ccur>
     b64:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <g_Ccur+0x1>
     b68:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <g_Ccur+0x2>
     b6c:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <g_Ccur+0x3>
     b70:	13 d3       	rcall	.+1574   	; 0x1198 <__subsf3>
     b72:	60 93 4a 02 	sts	0x024A, r22	; 0x80024a <g_Cerr>
     b76:	70 93 4b 02 	sts	0x024B, r23	; 0x80024b <g_Cerr+0x1>
     b7a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <g_Cerr+0x2>
     b7e:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <g_Cerr+0x3>
      cur_control = g_Cerr * Kp_c + C_err_sum * Ki_c * dt; // PI Controll
     b82:	80 90 4a 02 	lds	r8, 0x024A	; 0x80024a <g_Cerr>
     b86:	90 90 4b 02 	lds	r9, 0x024B	; 0x80024b <g_Cerr+0x1>
     b8a:	a0 90 4c 02 	lds	r10, 0x024C	; 0x80024c <g_Cerr+0x2>
     b8e:	b0 90 4d 02 	lds	r11, 0x024D	; 0x80024d <g_Cerr+0x3>
     b92:	40 90 14 01 	lds	r4, 0x0114	; 0x800114 <Kp_c>
     b96:	50 90 15 01 	lds	r5, 0x0115	; 0x800115 <Kp_c+0x1>
     b9a:	60 90 16 01 	lds	r6, 0x0116	; 0x800116 <Kp_c+0x2>
     b9e:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <Kp_c+0x3>
     ba2:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <C_err_sum>
     ba6:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <C_err_sum+0x1>
     baa:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <C_err_sum+0x2>
     bae:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <C_err_sum+0x3>
     bb2:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <Ki_c>
     bb6:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <Ki_c+0x1>
     bba:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <Ki_c+0x2>
     bbe:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <Ki_c+0x3>
     bc2:	c0 90 18 01 	lds	r12, 0x0118	; 0x800118 <dt>
     bc6:	d0 90 19 01 	lds	r13, 0x0119	; 0x800119 <dt+0x1>
     bca:	e0 90 1a 01 	lds	r14, 0x011A	; 0x80011a <dt+0x2>
     bce:	f0 90 1b 01 	lds	r15, 0x011B	; 0x80011b <dt+0x3>
     bd2:	9a d4       	rcall	.+2356   	; 0x1508 <__mulsf3>
     bd4:	a7 01       	movw	r20, r14
     bd6:	96 01       	movw	r18, r12
     bd8:	97 d4       	rcall	.+2350   	; 0x1508 <__mulsf3>
     bda:	6b 01       	movw	r12, r22
     bdc:	7c 01       	movw	r14, r24
     bde:	a3 01       	movw	r20, r6
     be0:	92 01       	movw	r18, r4
     be2:	c5 01       	movw	r24, r10
     be4:	b4 01       	movw	r22, r8
     be6:	90 d4       	rcall	.+2336   	; 0x1508 <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	c7 01       	movw	r24, r14
     bee:	b6 01       	movw	r22, r12
     bf0:	d4 d2       	rcall	.+1448   	; 0x119a <__addsf3>
     bf2:	a3 d3       	rcall	.+1862   	; 0x133a <__fixsfsi>
     bf4:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <cur_control+0x1>
      
      cur_control += g_Vcur * Ke; // 전향보상
     bf8:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <cur_control>
     bfc:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <g_Vcur>
     c00:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <g_Vcur+0x1>
     c04:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <g_Vcur+0x2>
     c08:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <g_Vcur+0x3>
     c0c:	e0 90 36 01 	lds	r14, 0x0136	; 0x800136 <cur_control>
     c10:	f0 90 37 01 	lds	r15, 0x0137	; 0x800137 <cur_control+0x1>
     c14:	2f ed       	ldi	r18, 0xDF	; 223
     c16:	30 ee       	ldi	r19, 0xE0	; 224
     c18:	4b e8       	ldi	r20, 0x8B	; 139
     c1a:	5d e3       	ldi	r21, 0x3D	; 61
     c1c:	75 d4       	rcall	.+2282   	; 0x1508 <__mulsf3>
     c1e:	4b 01       	movw	r8, r22
     c20:	5c 01       	movw	r10, r24
     c22:	b7 01       	movw	r22, r14
     c24:	ff 0c       	add	r15, r15
     c26:	88 0b       	sbc	r24, r24
     c28:	99 0b       	sbc	r25, r25
     c2a:	ba d3       	rcall	.+1908   	; 0x13a0 <__floatsisf>
     c2c:	9b 01       	movw	r18, r22
     c2e:	ac 01       	movw	r20, r24
     c30:	c5 01       	movw	r24, r10
     c32:	b4 01       	movw	r22, r8
     c34:	b2 d2       	rcall	.+1380   	; 0x119a <__addsf3>
     c36:	81 d3       	rcall	.+1794   	; 0x133a <__fixsfsi>
     c38:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <cur_control+0x1>
     c3c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <cur_control>
     c40:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <g_Cerr>
      C_err_sum += g_Cerr;
     c44:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <g_Cerr+0x1>
     c48:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <g_Cerr+0x2>
     c4c:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <g_Cerr+0x3>
     c50:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <C_err_sum>
     c54:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <C_err_sum+0x1>
     c58:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <C_err_sum+0x2>
     c5c:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <C_err_sum+0x3>
     c60:	9c d2       	rcall	.+1336   	; 0x119a <__addsf3>
     c62:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <C_err_sum>
     c66:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <C_err_sum+0x1>
     c6a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <C_err_sum+0x2>
     c6e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <C_err_sum+0x3>
      
      // Saturation을 이용한 오차 누적 방지
      // Anti-Windup
      if(cur_control > 24){
     c72:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <cur_control>
     c76:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <cur_control+0x1>
     c7a:	49 97       	sbiw	r24, 0x19	; 25
     c7c:	0c f4       	brge	.+2      	; 0xc80 <__LOCK_REGION_LENGTH__+0x880>
         C_err_sum -= (g_vel_control - 24.) * 1. / Kp_c / 3.;
     c7e:	3f c0       	rjmp	.+126    	; 0xcfe <__LOCK_REGION_LENGTH__+0x8fe>
     c80:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     c84:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     c88:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     c8c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     c90:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <Kp_c>
     c94:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <Kp_c+0x1>
     c98:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <Kp_c+0x2>
     c9c:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <Kp_c+0x3>
     ca0:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <C_err_sum>
     ca4:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <C_err_sum+0x1>
     ca8:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <C_err_sum+0x2>
     cac:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <C_err_sum+0x3>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 ec       	ldi	r20, 0xC0	; 192
     cb6:	51 e4       	ldi	r21, 0x41	; 65
     cb8:	6f d2       	rcall	.+1246   	; 0x1198 <__subsf3>
     cba:	a5 01       	movw	r20, r10
     cbc:	94 01       	movw	r18, r8
     cbe:	d5 d2       	rcall	.+1450   	; 0x126a <__divsf3>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e4       	ldi	r20, 0x40	; 64
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	d0 d2       	rcall	.+1440   	; 0x126a <__divsf3>
     cca:	9b 01       	movw	r18, r22
     ccc:	ac 01       	movw	r20, r24
     cce:	c7 01       	movw	r24, r14
     cd0:	b6 01       	movw	r22, r12
     cd2:	62 d2       	rcall	.+1220   	; 0x1198 <__subsf3>
     cd4:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <C_err_sum>
     cd8:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <C_err_sum+0x1>
     cdc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <C_err_sum+0x2>
     ce0:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <C_err_sum+0x3>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
         g_vel_control = 24.;
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 ec       	ldi	r26, 0xC0	; 192
     cea:	b1 e4       	ldi	r27, 0x41	; 65
     cec:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     cf0:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     cf4:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     cf8:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
      }
      else if(g_vel_control < -24){
     cfc:	4e c0       	rjmp	.+156    	; 0xd9a <__LOCK_REGION_LENGTH__+0x99a>
     cfe:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     d02:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     d06:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     d0a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 ec       	ldi	r20, 0xC0	; 192
     d14:	51 ec       	ldi	r21, 0xC1	; 193
     d16:	a5 d2       	rcall	.+1354   	; 0x1262 <__cmpsf2>
     d18:	88 23       	and	r24, r24
     d1a:	0c f0       	brlt	.+2      	; 0xd1e <__LOCK_REGION_LENGTH__+0x91e>
     d1c:	3e c0       	rjmp	.+124    	; 0xd9a <__LOCK_REGION_LENGTH__+0x99a>
         V_err_sum -= (g_vel_control + 24.) * 1. / Kp_c / 3.;
     d1e:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <g_vel_control>
     d22:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <g_vel_control+0x1>
     d26:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <g_vel_control+0x2>
     d2a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <g_vel_control+0x3>
     d2e:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <Kp_c>
     d32:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <Kp_c+0x1>
     d36:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <Kp_c+0x2>
     d3a:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <Kp_c+0x3>
     d3e:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <V_err_sum>
     d42:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <V_err_sum+0x1>
     d46:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <V_err_sum+0x2>
     d4a:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <V_err_sum+0x3>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 ec       	ldi	r20, 0xC0	; 192
     d54:	51 e4       	ldi	r21, 0x41	; 65
     d56:	21 d2       	rcall	.+1090   	; 0x119a <__addsf3>
     d58:	a5 01       	movw	r20, r10
     d5a:	94 01       	movw	r18, r8
     d5c:	86 d2       	rcall	.+1292   	; 0x126a <__divsf3>
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e4       	ldi	r20, 0x40	; 64
     d64:	50 e4       	ldi	r21, 0x40	; 64
     d66:	81 d2       	rcall	.+1282   	; 0x126a <__divsf3>
     d68:	9b 01       	movw	r18, r22
     d6a:	ac 01       	movw	r20, r24
     d6c:	c7 01       	movw	r24, r14
     d6e:	b6 01       	movw	r22, r12
     d70:	13 d2       	rcall	.+1062   	; 0x1198 <__subsf3>
     d72:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <V_err_sum>
     d76:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <V_err_sum+0x1>
     d7a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <V_err_sum+0x2>
     d7e:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <V_err_sum+0x3>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
         g_vel_control = -24.;
     d86:	a0 ec       	ldi	r26, 0xC0	; 192
     d88:	b1 ec       	ldi	r27, 0xC1	; 193
     d8a:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <g_vel_control>
     d8e:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <g_vel_control+0x1>
     d92:	a0 93 78 02 	sts	0x0278, r26	; 0x800278 <g_vel_control+0x2>
     d96:	b0 93 79 02 	sts	0x0279, r27	; 0x800279 <g_vel_control+0x3>
     d9a:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <g_TimerCnt>
      }
   }

   //
   g_TimerCnt++;
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <g_TimerCnt>
     da4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <cur_control>
   SetDutyCW(cur_control);
     da8:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <cur_control+0x1>
     dac:	07 2e       	mov	r0, r23
     dae:	00 0c       	add	r0, r0
     db0:	88 0b       	sbc	r24, r24
     db2:	99 0b       	sbc	r25, r25
     db4:	f5 d2       	rcall	.+1514   	; 0x13a0 <__floatsisf>
     db6:	89 d9       	rcall	.-3310   	; 0xca <SetDutyCW>
     db8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_SendFlag>
     dbc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_SendFlag+0x1>
   
   /////////////////////////////////////////
   
   g_SendFlag++;
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <g_SendFlag+0x1>
     dc6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <g_SendFlag>
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	ff 91       	pop	r31
     dd8:	ef 91       	pop	r30
     dda:	bf 91       	pop	r27
     ddc:	af 91       	pop	r26
     dde:	9f 91       	pop	r25
     de0:	8f 91       	pop	r24
     de2:	7f 91       	pop	r23
     de4:	6f 91       	pop	r22
     de6:	5f 91       	pop	r21
     de8:	4f 91       	pop	r20
     dea:	3f 91       	pop	r19
     dec:	2f 91       	pop	r18
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	0f 90       	pop	r0
     e08:	0b be       	out	0x3b, r0	; 59
     e0a:	0f 90       	pop	r0
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	0f 90       	pop	r0
     e10:	1f 90       	pop	r1
     e12:	18 95       	reti

00000e14 <main>:
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62


int main(void){
     e1c:	64 97       	sbiw	r28, 0x14	; 20
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
   
   Packet_t packet;
   packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     e28:	8e ef       	ldi	r24, 0xFE	; 254
     e2a:	8c 83       	std	Y+4, r24	; 0x04
     e2c:	8b 83       	std	Y+3, r24	; 0x03
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
   
   InitIO();
     e32:	4f d1       	rcall	.+670    	; 0x10d2 <InitIO>
   
   //Uart
   InitUart0();
     e34:	95 d1       	rcall	.+810    	; 0x1160 <InitUart0>
   
   //SPI
   InitSPI();
     e36:	9d d1       	rcall	.+826    	; 0x1172 <InitSPI>
   
   //Timer
   InitTimer0();
     e38:	59 d1       	rcall	.+690    	; 0x10ec <InitTimer0>
     e3a:	5d d1       	rcall	.+698    	; 0x10f6 <InitTimer1>
   InitTimer1();
     e3c:	6f d1       	rcall	.+734    	; 0x111c <InitTimer3>
     e3e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
   InitTimer3();
     e42:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


   TCNT1 = TCNT3 = 0;
     e46:	1d bc       	out	0x2d, r1	; 45
     e48:	1c bc       	out	0x2c, r1	; 44
     e4a:	60 e0       	ldi	r22, 0x00	; 0
   SetDutyCW(0.);
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	cb 01       	movw	r24, r22
     e50:	3c d9       	rcall	.-3464   	; 0xca <SetDutyCW>
     e52:	81 d1       	rcall	.+770    	; 0x1156 <InitADC>
     e54:	69 d9       	rcall	.-3374   	; 0x128 <InitLS7366>
   
   //ADC
   InitADC();
     e56:	83 e8       	ldi	r24, 0x83	; 131
     e58:	82 bf       	out	0x32, r24	; 50
   
   //LS7366
   InitLS7366();
     e5a:	78 94       	sei
     e5c:	b1 2c       	mov	r11, r1
   
   //TCNT3 = 65536 - 125;
   TCNT0 = 256 - 125;
     e5e:	aa 24       	eor	r10, r10
     e60:	aa 94       	dec	r10
   sei();
     e62:	0f 2e       	mov	r0, r31

   unsigned char check = 0;
     e64:	fe e5       	ldi	r31, 0x5E	; 94
   
   while (1) {
      PORTA = 0xFF;
     e66:	cf 2e       	mov	r12, r31
     e68:	f2 e0       	ldi	r31, 0x02	; 2
               }
            }
            break;
            
            case 2:
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     e6a:	df 2e       	mov	r13, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	66 24       	eor	r6, r6
     e70:	63 94       	inc	r6
     e72:	68 94       	set
     e74:	77 24       	eor	r7, r7
         switch(g_PacketMode){
            case 0:
            if(g_buf[g_BufReadCnt] == 0xFF){
               checkSize++;
               if(checkSize == 4){
                  g_PacketMode =1;
     e76:	71 f8       	bld	r7, 1
     e78:	0f 2e       	mov	r0, r31
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
            
            if(checkSize == 8){
               
               if(g_PacketBuffer.data.id == g_ID){
                  g_PacketMode = 2;
     e7a:	f4 e1       	ldi	r31, 0x14	; 20
     e7c:	8f 2e       	mov	r8, r31
     e7e:	f0 2d       	mov	r31, r0
      }
      if(g_SendFlag > 19){
         g_SendFlag = 0;

         packet.data.id = g_ID;
         packet.data.size = sizeof(Packet_data_t);
     e80:	0f 2e       	mov	r0, r31
     e82:	f3 e0       	ldi	r31, 0x03	; 3
     e84:	9f 2e       	mov	r9, r31
     e86:	f0 2d       	mov	r31, r0
         packet.data.mode = 3;
     e88:	7e 01       	movw	r14, r28
     e8a:	85 e1       	ldi	r24, 0x15	; 21
     e8c:	e8 0e       	add	r14, r24
     e8e:	f1 1c       	adc	r15, r1
     e90:	ab ba       	out	0x1b, r10	; 27
     e92:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_BufReadCnt>
     e96:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <g_BufWriteCnt>

   unsigned char check = 0;
   
   while (1) {
      PORTA = 0xFF;
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     e9a:	98 17       	cp	r25, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <main+0x8c>
     e9e:	be c0       	rjmp	.+380    	; 0x101c <main+0x208>
     ea0:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <g_PacketMode>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	e1 f0       	breq	.+56     	; 0xee0 <main+0xcc>
         switch(g_PacketMode){
     ea8:	18 f0       	brcs	.+6      	; 0xeb0 <main+0x9c>
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	e1 f1       	breq	.+120    	; 0xf26 <main+0x112>
     eae:	ab c0       	rjmp	.+342    	; 0x1006 <main+0x1f2>
     eb0:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_BufReadCnt>
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ea 5b       	subi	r30, 0xBA	; 186
            case 0:
            if(g_buf[g_BufReadCnt] == 0xFF){
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	80 81       	ld	r24, Z
     ebc:	8f 3f       	cpi	r24, 0xFF	; 255
     ebe:	69 f4       	brne	.+26     	; 0xeda <main+0xc6>
     ec0:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
               checkSize++;
     eca:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	09 f0       	breq	.+2      	; 0xed4 <main+0xc0>
               if(checkSize == 4){
     ed2:	99 c0       	rjmp	.+306    	; 0x1006 <main+0x1f2>
     ed4:	60 92 94 02 	sts	0x0294, r6	; 0x800294 <g_PacketMode>
     ed8:	96 c0       	rjmp	.+300    	; 0x1006 <main+0x1f2>
     eda:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
                  g_PacketMode =1;
     ede:	93 c0       	rjmp	.+294    	; 0x1006 <main+0x1f2>
     ee0:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <checkSize>
               }
            }
            else{
               checkSize = 0;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	8e 0f       	add	r24, r30
            }
            break;
            case 1:
            
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     ee8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <g_BufReadCnt>
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	aa 5b       	subi	r26, 0xBA	; 186
     ef6:	be 4f       	sbci	r27, 0xFE	; 254
     ef8:	8c 91       	ld	r24, X
     efa:	e2 5a       	subi	r30, 0xA2	; 162
     efc:	fd 4f       	sbci	r31, 0xFD	; 253
     efe:	80 83       	st	Z, r24
     f00:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	09 f0       	breq	.+2      	; 0xf0a <main+0xf6>
            
            if(checkSize == 8){
     f08:	7e c0       	rjmp	.+252    	; 0x1006 <main+0x1f2>
     f0a:	f6 01       	movw	r30, r12
     f0c:	95 81       	ldd	r25, Z+5	; 0x05
     f0e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_ID>
               
               if(g_PacketBuffer.data.id == g_ID){
     f12:	98 13       	cpse	r25, r24
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <main+0x108>
     f16:	70 92 94 02 	sts	0x0294, r7	; 0x800294 <g_PacketMode>
     f1a:	75 c0       	rjmp	.+234    	; 0x1006 <main+0x1f2>
     f1c:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_PacketMode>
                  g_PacketMode = 2;
     f20:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
                  
               }
               else{
                  g_PacketMode = 0;
     f24:	70 c0       	rjmp	.+224    	; 0x1006 <main+0x1f2>
     f26:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <checkSize>
                  checkSize = 0;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	8e 0f       	add	r24, r30
               }
            }
            break;
            
            case 2:
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     f2e:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <checkSize>
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	a0 91 8b 02 	lds	r26, 0x028B	; 0x80028b <g_BufReadCnt>
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	aa 5b       	subi	r26, 0xBA	; 186
     f3c:	be 4f       	sbci	r27, 0xFE	; 254
     f3e:	8c 91       	ld	r24, X
     f40:	e2 5a       	subi	r30, 0xA2	; 162
     f42:	fd 4f       	sbci	r31, 0xFD	; 253
     f44:	80 83       	st	Z, r24
     f46:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <g_BufReadCnt>
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	ea 5b       	subi	r30, 0xBA	; 186
            check += g_buf[g_BufReadCnt];
     f4e:	fe 4f       	sbci	r31, 0xFE	; 254
     f50:	80 81       	ld	r24, Z
     f52:	b8 0e       	add	r11, r24
     f54:	f6 01       	movw	r30, r12
     f56:	94 81       	ldd	r25, Z+4	; 0x04
     f58:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
            
            if(checkSize == g_PacketBuffer.data.size){
     f5c:	98 13       	cpse	r25, r24
     f5e:	44 c0       	rjmp	.+136    	; 0xfe8 <main+0x1d4>
     f60:	87 81       	ldd	r24, Z+7	; 0x07
     f62:	b8 12       	cpse	r11, r24
     f64:	3b c0       	rjmp	.+118    	; 0xfdc <main+0x1c8>
     f66:	86 81       	ldd	r24, Z+6	; 0x06
               if(check == g_PacketBuffer.data.check){
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	c1 f5       	brne	.+112    	; 0xfdc <main+0x1c8>
                  switch(g_PacketBuffer.data.mode){
     f6c:	60 85       	ldd	r22, Z+8	; 0x08
     f6e:	71 85       	ldd	r23, Z+9	; 0x09
     f70:	82 85       	ldd	r24, Z+10	; 0x0a
                     case 2:
                     g_Pdes =g_PacketBuffer.data.pos /1000.;
     f72:	93 85       	ldd	r25, Z+11	; 0x0b
     f74:	15 d2       	rcall	.+1066   	; 0x13a0 <__floatsisf>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	4a e7       	ldi	r20, 0x7A	; 122
     f7c:	54 e4       	ldi	r21, 0x44	; 68
     f7e:	75 d1       	rcall	.+746    	; 0x126a <__divsf3>
     f80:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <g_Pdes>
     f84:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <g_Pdes+0x1>
     f88:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <g_Pdes+0x2>
     f8c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <g_Pdes+0x3>
     f90:	f6 01       	movw	r30, r12
     f92:	64 85       	ldd	r22, Z+12	; 0x0c
     f94:	75 85       	ldd	r23, Z+13	; 0x0d
                     V_limit=g_PacketBuffer.data.velo /1000.;
     f96:	86 85       	ldd	r24, Z+14	; 0x0e
     f98:	97 85       	ldd	r25, Z+15	; 0x0f
     f9a:	02 d2       	rcall	.+1028   	; 0x13a0 <__floatsisf>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	4a e7       	ldi	r20, 0x7A	; 122
     fa2:	54 e4       	ldi	r21, 0x44	; 68
     fa4:	62 d1       	rcall	.+708    	; 0x126a <__divsf3>
     fa6:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <V_limit>
     faa:	70 93 22 01 	sts	0x0122, r23	; 0x800122 <V_limit+0x1>
     fae:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <V_limit+0x2>
     fb2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <V_limit+0x3>
     fb6:	f6 01       	movw	r30, r12
     fb8:	60 89       	ldd	r22, Z+16	; 0x10
     fba:	71 89       	ldd	r23, Z+17	; 0x11
                     C_limit=g_PacketBuffer.data.cur /1000.;
     fbc:	82 89       	ldd	r24, Z+18	; 0x12
     fbe:	93 89       	ldd	r25, Z+19	; 0x13
     fc0:	ef d1       	rcall	.+990    	; 0x13a0 <__floatsisf>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a e7       	ldi	r20, 0x7A	; 122
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	4f d1       	rcall	.+670    	; 0x126a <__divsf3>
     fcc:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <C_limit>
     fd0:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <C_limit+0x1>
     fd4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <C_limit+0x2>
     fd8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <C_limit+0x3>
     fdc:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_PacketMode>
     fe0:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
     fe4:	b1 2c       	mov	r11, r1
                     break;
                  }
               }
               check = 0;
               g_PacketMode = 0;
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <main+0x1f2>
     fe8:	f6 01       	movw	r30, r12
               checkSize = 0;
     fea:	94 81       	ldd	r25, Z+4	; 0x04
     fec:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
                     V_limit=g_PacketBuffer.data.velo /1000.;
                     C_limit=g_PacketBuffer.data.cur /1000.;
                     break;
                  }
               }
               check = 0;
     ff0:	98 17       	cp	r25, r24
               g_PacketMode = 0;
               checkSize = 0;
               
            }
            else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)){
     ff2:	20 f0       	brcs	.+8      	; 0xffc <main+0x1e8>
     ff4:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <checkSize>
     ff8:	85 31       	cpi	r24, 0x15	; 21
     ffa:	28 f0       	brcs	.+10     	; 0x1006 <main+0x1f2>
     ffc:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <g_PacketMode>
    1000:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <checkSize>
    1004:	b1 2c       	mov	r11, r1
               //TransUart0('f');
               check = 0;
               g_PacketMode =0;
    1006:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <g_BufReadCnt>
               checkSize = 0;
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <g_BufReadCnt>

   unsigned char check = 0;
   
   while (1) {
      PORTA = 0xFF;
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
    1010:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_BufReadCnt>
    1014:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <g_BufWriteCnt>
    1018:	98 13       	cpse	r25, r24
    101a:	42 cf       	rjmp	.-380    	; 0xea0 <main+0x8c>
    101c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_SendFlag>
    1020:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <g_SendFlag+0x1>
    1024:	44 97       	sbiw	r24, 0x14	; 20
               checkSize = 0;
            }

         }
      }
      if(g_SendFlag > 19){
    1026:	0c f4       	brge	.+2      	; 0x102a <main+0x216>
    1028:	33 cf       	rjmp	.-410    	; 0xe90 <main+0x7c>
    102a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_SendFlag+0x1>
    102e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_SendFlag>
    1032:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <g_ID>
         g_SendFlag = 0;
    1036:	8e 83       	std	Y+6, r24	; 0x06
    1038:	8d 82       	std	Y+5, r8	; 0x05
    103a:	9f 82       	std	Y+7, r9	; 0x07

         packet.data.id = g_ID;
    103c:	18 86       	std	Y+8, r1	; 0x08
    103e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pcur>
         packet.data.size = sizeof(Packet_data_t);
         packet.data.mode = 3;
         packet.data.check = 0;
    1042:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pcur+0x1>
         
         // send data
         packet.data.pos=g_Pcur * 1000;
    1046:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pcur+0x2>
    104a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pcur+0x3>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	4a e7       	ldi	r20, 0x7A	; 122
    1054:	54 e4       	ldi	r21, 0x44	; 68
    1056:	58 d2       	rcall	.+1200   	; 0x1508 <__mulsf3>
    1058:	70 d1       	rcall	.+736    	; 0x133a <__fixsfsi>
    105a:	69 87       	std	Y+9, r22	; 0x09
    105c:	7a 87       	std	Y+10, r23	; 0x0a
    105e:	8b 87       	std	Y+11, r24	; 0x0b
    1060:	9c 87       	std	Y+12, r25	; 0x0c
    1062:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <g_Vcur>
    1066:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <g_Vcur+0x1>
         packet.data.velo=g_Vcur * 1000;
    106a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <g_Vcur+0x2>
    106e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <g_Vcur+0x3>
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	46 d2       	rcall	.+1164   	; 0x1508 <__mulsf3>
    107c:	5e d1       	rcall	.+700    	; 0x133a <__fixsfsi>
    107e:	6d 87       	std	Y+13, r22	; 0x0d
    1080:	7e 87       	std	Y+14, r23	; 0x0e
    1082:	8f 87       	std	Y+15, r24	; 0x0f
    1084:	98 8b       	std	Y+16, r25	; 0x10
    1086:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <g_Ccur>
    108a:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <g_Ccur+0x1>
         packet.data.cur=g_Ccur * 1000;
    108e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <g_Ccur+0x2>
    1092:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <g_Ccur+0x3>
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a e7       	ldi	r20, 0x7A	; 122
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	34 d2       	rcall	.+1128   	; 0x1508 <__mulsf3>
    10a0:	4c d1       	rcall	.+664    	; 0x133a <__fixsfsi>
    10a2:	69 8b       	std	Y+17, r22	; 0x11
    10a4:	7a 8b       	std	Y+18, r23	; 0x12
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	9c 8b       	std	Y+20, r25	; 0x14
    10aa:	fe 01       	movw	r30, r28
    10ac:	39 96       	adiw	r30, 0x09	; 9
    10ae:	81 91       	ld	r24, Z+
    10b0:	98 85       	ldd	r25, Y+8	; 0x08
    10b2:	89 0f       	add	r24, r25
    10b4:	88 87       	std	Y+8, r24	; 0x08

         for(int i=8; i<sizeof(Packet_t); i++)
         packet.data.check += packet.buffer[i];
    10b6:	ee 16       	cp	r14, r30
    10b8:	ff 06       	cpc	r15, r31
    10ba:	c9 f7       	brne	.-14     	; 0x10ae <main+0x29a>
    10bc:	8e 01       	movw	r16, r28
         // send data
         packet.data.pos=g_Pcur * 1000;
         packet.data.velo=g_Vcur * 1000;
         packet.data.cur=g_Ccur * 1000;

         for(int i=8; i<sizeof(Packet_t); i++)
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	f8 01       	movw	r30, r16
    10c4:	81 91       	ld	r24, Z+
    10c6:	8f 01       	movw	r16, r30
    10c8:	59 d0       	rcall	.+178    	; 0x117c <TransUart0>
         packet.data.check += packet.buffer[i];

         for(int i=0; i<packet.data.size; i++){
            TransUart0(packet.buffer[i]);
    10ca:	0e 15       	cp	r16, r14
    10cc:	1f 05       	cpc	r17, r15
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <main+0x2ae>
    10d0:	df ce       	rjmp	.-578    	; 0xe90 <main+0x7c>

000010d2 <InitIO>:
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
         packet.data.cur=g_Ccur * 1000;

         for(int i=8; i<sizeof(Packet_t); i++)
         packet.data.check += packet.buffer[i];

         for(int i=0; i<packet.data.size; i++){
    10d4:	8a bb       	out	0x1a, r24	; 26
    10d6:	84 bb       	out	0x14, r24	; 20
    10d8:	88 e0       	ldi	r24, 0x08	; 8
    10da:	81 bb       	out	0x11, r24	; 17
    10dc:	87 e6       	ldi	r24, 0x67	; 103
    10de:	87 bb       	out	0x17, r24	; 23
    10e0:	8a e1       	ldi	r24, 0x1A	; 26
    10e2:	82 b9       	out	0x02, r24	; 2
    10e4:	1b ba       	out	0x1b, r1	; 27
    10e6:	87 e0       	ldi	r24, 0x07	; 7
    10e8:	88 bb       	out	0x18, r24	; 24
    10ea:	08 95       	ret

000010ec <InitTimer0>:
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	83 bf       	out	0x33, r24	; 51
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	87 bf       	out	0x37, r24	; 55
    10f4:	08 95       	ret

000010f6 <InitTimer1>:
    10f6:	82 ee       	ldi	r24, 0xE2	; 226
    10f8:	8f bd       	out	0x2f, r24	; 47
    10fa:	81 e1       	ldi	r24, 0x11	; 17
    10fc:	8e bd       	out	0x2e, r24	; 46
    10fe:	8f e8       	ldi	r24, 0x8F	; 143
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	97 bd       	out	0x27, r25	; 39
    1104:	86 bd       	out	0x26, r24	; 38
    1106:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    110a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    110e:	1b bc       	out	0x2b, r1	; 43
    1110:	1a bc       	out	0x2a, r1	; 42
    1112:	19 bc       	out	0x29, r1	; 41
    1114:	18 bc       	out	0x28, r1	; 40
    1116:	1d bc       	out	0x2d, r1	; 45
    1118:	1c bc       	out	0x2c, r1	; 44
    111a:	08 95       	ret

0000111c <InitTimer3>:
    111c:	82 eb       	ldi	r24, 0xB2	; 178
    111e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1122:	81 e1       	ldi	r24, 0x11	; 17
    1124:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1128:	8f e8       	ldi	r24, 0x8F	; 143
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1130:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1134:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
    1138:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
    113c:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1140:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1144:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1148:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    114c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1150:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1154:	08 95       	ret

00001156 <InitADC>:
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	87 b9       	out	0x07, r24	; 7
    115a:	86 e8       	ldi	r24, 0x86	; 134
    115c:	86 b9       	out	0x06, r24	; 6
    115e:	08 95       	ret

00001160 <InitUart0>:
    1160:	1b b8       	out	0x0b, r1	; 11
    1162:	88 e9       	ldi	r24, 0x98	; 152
    1164:	8a b9       	out	0x0a, r24	; 10
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    116c:	87 e6       	ldi	r24, 0x67	; 103
    116e:	89 b9       	out	0x09, r24	; 9
    1170:	08 95       	ret

00001172 <InitSPI>:
    1172:	80 e5       	ldi	r24, 0x50	; 80
    1174:	8d b9       	out	0x0d, r24	; 13
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	8e b9       	out	0x0e, r24	; 14
    117a:	08 95       	ret

0000117c <TransUart0>:
    117c:	5d 9b       	sbis	0x0b, 5	; 11
    117e:	fe cf       	rjmp	.-4      	; 0x117c <TransUart0>
    1180:	8c b9       	out	0x0c, r24	; 12
    1182:	08 95       	ret

00001184 <SPI_MasterSend>:
    1184:	8f b9       	out	0x0f, r24	; 15
    1186:	77 9b       	sbis	0x0e, 7	; 14
    1188:	fe cf       	rjmp	.-4      	; 0x1186 <SPI_MasterSend+0x2>
    118a:	8f b1       	in	r24, 0x0f	; 15
    118c:	08 95       	ret

0000118e <SPI_MasterRecv>:
    118e:	1f b8       	out	0x0f, r1	; 15
    1190:	77 9b       	sbis	0x0e, 7	; 14
    1192:	fe cf       	rjmp	.-4      	; 0x1190 <SPI_MasterRecv+0x2>
    1194:	8f b1       	in	r24, 0x0f	; 15
    1196:	08 95       	ret

00001198 <__subsf3>:
    1198:	50 58       	subi	r21, 0x80	; 128

0000119a <__addsf3>:
    119a:	bb 27       	eor	r27, r27
    119c:	aa 27       	eor	r26, r26
    119e:	0e d0       	rcall	.+28     	; 0x11bc <__addsf3x>
    11a0:	75 c1       	rjmp	.+746    	; 0x148c <__fp_round>
    11a2:	66 d1       	rcall	.+716    	; 0x1470 <__fp_pscA>
    11a4:	30 f0       	brcs	.+12     	; 0x11b2 <__addsf3+0x18>
    11a6:	6b d1       	rcall	.+726    	; 0x147e <__fp_pscB>
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__addsf3+0x18>
    11aa:	31 f4       	brne	.+12     	; 0x11b8 <__addsf3+0x1e>
    11ac:	9f 3f       	cpi	r25, 0xFF	; 255
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <__addsf3+0x1a>
    11b0:	1e f4       	brtc	.+6      	; 0x11b8 <__addsf3+0x1e>
    11b2:	5b c1       	rjmp	.+694    	; 0x146a <__fp_nan>
    11b4:	0e f4       	brtc	.+2      	; 0x11b8 <__addsf3+0x1e>
    11b6:	e0 95       	com	r30
    11b8:	e7 fb       	bst	r30, 7
    11ba:	51 c1       	rjmp	.+674    	; 0x145e <__fp_inf>

000011bc <__addsf3x>:
    11bc:	e9 2f       	mov	r30, r25
    11be:	77 d1       	rcall	.+750    	; 0x14ae <__fp_split3>
    11c0:	80 f3       	brcs	.-32     	; 0x11a2 <__addsf3+0x8>
    11c2:	ba 17       	cp	r27, r26
    11c4:	62 07       	cpc	r22, r18
    11c6:	73 07       	cpc	r23, r19
    11c8:	84 07       	cpc	r24, r20
    11ca:	95 07       	cpc	r25, r21
    11cc:	18 f0       	brcs	.+6      	; 0x11d4 <__addsf3x+0x18>
    11ce:	71 f4       	brne	.+28     	; 0x11ec <__addsf3x+0x30>
    11d0:	9e f5       	brtc	.+102    	; 0x1238 <__addsf3x+0x7c>
    11d2:	8f c1       	rjmp	.+798    	; 0x14f2 <__fp_zero>
    11d4:	0e f4       	brtc	.+2      	; 0x11d8 <__addsf3x+0x1c>
    11d6:	e0 95       	com	r30
    11d8:	0b 2e       	mov	r0, r27
    11da:	ba 2f       	mov	r27, r26
    11dc:	a0 2d       	mov	r26, r0
    11de:	0b 01       	movw	r0, r22
    11e0:	b9 01       	movw	r22, r18
    11e2:	90 01       	movw	r18, r0
    11e4:	0c 01       	movw	r0, r24
    11e6:	ca 01       	movw	r24, r20
    11e8:	a0 01       	movw	r20, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	ff 27       	eor	r31, r31
    11ee:	59 1b       	sub	r21, r25
    11f0:	99 f0       	breq	.+38     	; 0x1218 <__addsf3x+0x5c>
    11f2:	59 3f       	cpi	r21, 0xF9	; 249
    11f4:	50 f4       	brcc	.+20     	; 0x120a <__addsf3x+0x4e>
    11f6:	50 3e       	cpi	r21, 0xE0	; 224
    11f8:	68 f1       	brcs	.+90     	; 0x1254 <__addsf3x+0x98>
    11fa:	1a 16       	cp	r1, r26
    11fc:	f0 40       	sbci	r31, 0x00	; 0
    11fe:	a2 2f       	mov	r26, r18
    1200:	23 2f       	mov	r18, r19
    1202:	34 2f       	mov	r19, r20
    1204:	44 27       	eor	r20, r20
    1206:	58 5f       	subi	r21, 0xF8	; 248
    1208:	f3 cf       	rjmp	.-26     	; 0x11f0 <__addsf3x+0x34>
    120a:	46 95       	lsr	r20
    120c:	37 95       	ror	r19
    120e:	27 95       	ror	r18
    1210:	a7 95       	ror	r26
    1212:	f0 40       	sbci	r31, 0x00	; 0
    1214:	53 95       	inc	r21
    1216:	c9 f7       	brne	.-14     	; 0x120a <__addsf3x+0x4e>
    1218:	7e f4       	brtc	.+30     	; 0x1238 <__addsf3x+0x7c>
    121a:	1f 16       	cp	r1, r31
    121c:	ba 0b       	sbc	r27, r26
    121e:	62 0b       	sbc	r22, r18
    1220:	73 0b       	sbc	r23, r19
    1222:	84 0b       	sbc	r24, r20
    1224:	ba f0       	brmi	.+46     	; 0x1254 <__addsf3x+0x98>
    1226:	91 50       	subi	r25, 0x01	; 1
    1228:	a1 f0       	breq	.+40     	; 0x1252 <__addsf3x+0x96>
    122a:	ff 0f       	add	r31, r31
    122c:	bb 1f       	adc	r27, r27
    122e:	66 1f       	adc	r22, r22
    1230:	77 1f       	adc	r23, r23
    1232:	88 1f       	adc	r24, r24
    1234:	c2 f7       	brpl	.-16     	; 0x1226 <__addsf3x+0x6a>
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <__addsf3x+0x98>
    1238:	ba 0f       	add	r27, r26
    123a:	62 1f       	adc	r22, r18
    123c:	73 1f       	adc	r23, r19
    123e:	84 1f       	adc	r24, r20
    1240:	48 f4       	brcc	.+18     	; 0x1254 <__addsf3x+0x98>
    1242:	87 95       	ror	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	9e 3f       	cpi	r25, 0xFE	; 254
    124e:	08 f0       	brcs	.+2      	; 0x1252 <__addsf3x+0x96>
    1250:	b3 cf       	rjmp	.-154    	; 0x11b8 <__addsf3+0x1e>
    1252:	93 95       	inc	r25
    1254:	88 0f       	add	r24, r24
    1256:	08 f0       	brcs	.+2      	; 0x125a <__addsf3x+0x9e>
    1258:	99 27       	eor	r25, r25
    125a:	ee 0f       	add	r30, r30
    125c:	97 95       	ror	r25
    125e:	87 95       	ror	r24
    1260:	08 95       	ret

00001262 <__cmpsf2>:
    1262:	d9 d0       	rcall	.+434    	; 0x1416 <__fp_cmp>
    1264:	08 f4       	brcc	.+2      	; 0x1268 <__cmpsf2+0x6>
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	08 95       	ret

0000126a <__divsf3>:
    126a:	0c d0       	rcall	.+24     	; 0x1284 <__divsf3x>
    126c:	0f c1       	rjmp	.+542    	; 0x148c <__fp_round>
    126e:	07 d1       	rcall	.+526    	; 0x147e <__fp_pscB>
    1270:	40 f0       	brcs	.+16     	; 0x1282 <__divsf3+0x18>
    1272:	fe d0       	rcall	.+508    	; 0x1470 <__fp_pscA>
    1274:	30 f0       	brcs	.+12     	; 0x1282 <__divsf3+0x18>
    1276:	21 f4       	brne	.+8      	; 0x1280 <__divsf3+0x16>
    1278:	5f 3f       	cpi	r21, 0xFF	; 255
    127a:	19 f0       	breq	.+6      	; 0x1282 <__divsf3+0x18>
    127c:	f0 c0       	rjmp	.+480    	; 0x145e <__fp_inf>
    127e:	51 11       	cpse	r21, r1
    1280:	39 c1       	rjmp	.+626    	; 0x14f4 <__fp_szero>
    1282:	f3 c0       	rjmp	.+486    	; 0x146a <__fp_nan>

00001284 <__divsf3x>:
    1284:	14 d1       	rcall	.+552    	; 0x14ae <__fp_split3>
    1286:	98 f3       	brcs	.-26     	; 0x126e <__divsf3+0x4>

00001288 <__divsf3_pse>:
    1288:	99 23       	and	r25, r25
    128a:	c9 f3       	breq	.-14     	; 0x127e <__divsf3+0x14>
    128c:	55 23       	and	r21, r21
    128e:	b1 f3       	breq	.-20     	; 0x127c <__divsf3+0x12>
    1290:	95 1b       	sub	r25, r21
    1292:	55 0b       	sbc	r21, r21
    1294:	bb 27       	eor	r27, r27
    1296:	aa 27       	eor	r26, r26
    1298:	62 17       	cp	r22, r18
    129a:	73 07       	cpc	r23, r19
    129c:	84 07       	cpc	r24, r20
    129e:	38 f0       	brcs	.+14     	; 0x12ae <__divsf3_pse+0x26>
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	aa 1f       	adc	r26, r26
    12ac:	a9 f3       	breq	.-22     	; 0x1298 <__divsf3_pse+0x10>
    12ae:	33 d0       	rcall	.+102    	; 0x1316 <__divsf3_pse+0x8e>
    12b0:	0e 2e       	mov	r0, r30
    12b2:	3a f0       	brmi	.+14     	; 0x12c2 <__divsf3_pse+0x3a>
    12b4:	e0 e8       	ldi	r30, 0x80	; 128
    12b6:	30 d0       	rcall	.+96     	; 0x1318 <__divsf3_pse+0x90>
    12b8:	91 50       	subi	r25, 0x01	; 1
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	e6 95       	lsr	r30
    12be:	00 1c       	adc	r0, r0
    12c0:	ca f7       	brpl	.-14     	; 0x12b4 <__divsf3_pse+0x2c>
    12c2:	29 d0       	rcall	.+82     	; 0x1316 <__divsf3_pse+0x8e>
    12c4:	fe 2f       	mov	r31, r30
    12c6:	27 d0       	rcall	.+78     	; 0x1316 <__divsf3_pse+0x8e>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	88 1f       	adc	r24, r24
    12ce:	bb 1f       	adc	r27, r27
    12d0:	26 17       	cp	r18, r22
    12d2:	37 07       	cpc	r19, r23
    12d4:	48 07       	cpc	r20, r24
    12d6:	ab 07       	cpc	r26, r27
    12d8:	b0 e8       	ldi	r27, 0x80	; 128
    12da:	09 f0       	breq	.+2      	; 0x12de <__divsf3_pse+0x56>
    12dc:	bb 0b       	sbc	r27, r27
    12de:	80 2d       	mov	r24, r0
    12e0:	bf 01       	movw	r22, r30
    12e2:	ff 27       	eor	r31, r31
    12e4:	93 58       	subi	r25, 0x83	; 131
    12e6:	5f 4f       	sbci	r21, 0xFF	; 255
    12e8:	2a f0       	brmi	.+10     	; 0x12f4 <__divsf3_pse+0x6c>
    12ea:	9e 3f       	cpi	r25, 0xFE	; 254
    12ec:	51 05       	cpc	r21, r1
    12ee:	68 f0       	brcs	.+26     	; 0x130a <__divsf3_pse+0x82>
    12f0:	b6 c0       	rjmp	.+364    	; 0x145e <__fp_inf>
    12f2:	00 c1       	rjmp	.+512    	; 0x14f4 <__fp_szero>
    12f4:	5f 3f       	cpi	r21, 0xFF	; 255
    12f6:	ec f3       	brlt	.-6      	; 0x12f2 <__divsf3_pse+0x6a>
    12f8:	98 3e       	cpi	r25, 0xE8	; 232
    12fa:	dc f3       	brlt	.-10     	; 0x12f2 <__divsf3_pse+0x6a>
    12fc:	86 95       	lsr	r24
    12fe:	77 95       	ror	r23
    1300:	67 95       	ror	r22
    1302:	b7 95       	ror	r27
    1304:	f7 95       	ror	r31
    1306:	9f 5f       	subi	r25, 0xFF	; 255
    1308:	c9 f7       	brne	.-14     	; 0x12fc <__divsf3_pse+0x74>
    130a:	88 0f       	add	r24, r24
    130c:	91 1d       	adc	r25, r1
    130e:	96 95       	lsr	r25
    1310:	87 95       	ror	r24
    1312:	97 f9       	bld	r25, 7
    1314:	08 95       	ret
    1316:	e1 e0       	ldi	r30, 0x01	; 1
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	bb 1f       	adc	r27, r27
    1320:	62 17       	cp	r22, r18
    1322:	73 07       	cpc	r23, r19
    1324:	84 07       	cpc	r24, r20
    1326:	ba 07       	cpc	r27, r26
    1328:	20 f0       	brcs	.+8      	; 0x1332 <__divsf3_pse+0xaa>
    132a:	62 1b       	sub	r22, r18
    132c:	73 0b       	sbc	r23, r19
    132e:	84 0b       	sbc	r24, r20
    1330:	ba 0b       	sbc	r27, r26
    1332:	ee 1f       	adc	r30, r30
    1334:	88 f7       	brcc	.-30     	; 0x1318 <__divsf3_pse+0x90>
    1336:	e0 95       	com	r30
    1338:	08 95       	ret

0000133a <__fixsfsi>:
    133a:	04 d0       	rcall	.+8      	; 0x1344 <__fixunssfsi>
    133c:	68 94       	set
    133e:	b1 11       	cpse	r27, r1
    1340:	d9 c0       	rjmp	.+434    	; 0x14f4 <__fp_szero>
    1342:	08 95       	ret

00001344 <__fixunssfsi>:
    1344:	bc d0       	rcall	.+376    	; 0x14be <__fp_splitA>
    1346:	88 f0       	brcs	.+34     	; 0x136a <__fixunssfsi+0x26>
    1348:	9f 57       	subi	r25, 0x7F	; 127
    134a:	90 f0       	brcs	.+36     	; 0x1370 <__fixunssfsi+0x2c>
    134c:	b9 2f       	mov	r27, r25
    134e:	99 27       	eor	r25, r25
    1350:	b7 51       	subi	r27, 0x17	; 23
    1352:	a0 f0       	brcs	.+40     	; 0x137c <__fixunssfsi+0x38>
    1354:	d1 f0       	breq	.+52     	; 0x138a <__fixunssfsi+0x46>
    1356:	66 0f       	add	r22, r22
    1358:	77 1f       	adc	r23, r23
    135a:	88 1f       	adc	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	1a f0       	brmi	.+6      	; 0x1366 <__fixunssfsi+0x22>
    1360:	ba 95       	dec	r27
    1362:	c9 f7       	brne	.-14     	; 0x1356 <__fixunssfsi+0x12>
    1364:	12 c0       	rjmp	.+36     	; 0x138a <__fixunssfsi+0x46>
    1366:	b1 30       	cpi	r27, 0x01	; 1
    1368:	81 f0       	breq	.+32     	; 0x138a <__fixunssfsi+0x46>
    136a:	c3 d0       	rcall	.+390    	; 0x14f2 <__fp_zero>
    136c:	b1 e0       	ldi	r27, 0x01	; 1
    136e:	08 95       	ret
    1370:	c0 c0       	rjmp	.+384    	; 0x14f2 <__fp_zero>
    1372:	67 2f       	mov	r22, r23
    1374:	78 2f       	mov	r23, r24
    1376:	88 27       	eor	r24, r24
    1378:	b8 5f       	subi	r27, 0xF8	; 248
    137a:	39 f0       	breq	.+14     	; 0x138a <__fixunssfsi+0x46>
    137c:	b9 3f       	cpi	r27, 0xF9	; 249
    137e:	cc f3       	brlt	.-14     	; 0x1372 <__fixunssfsi+0x2e>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b3 95       	inc	r27
    1388:	d9 f7       	brne	.-10     	; 0x1380 <__fixunssfsi+0x3c>
    138a:	3e f4       	brtc	.+14     	; 0x139a <__fixunssfsi+0x56>
    138c:	90 95       	com	r25
    138e:	80 95       	com	r24
    1390:	70 95       	com	r23
    1392:	61 95       	neg	r22
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	8f 4f       	sbci	r24, 0xFF	; 255
    1398:	9f 4f       	sbci	r25, 0xFF	; 255
    139a:	08 95       	ret

0000139c <__floatunsisf>:
    139c:	e8 94       	clt
    139e:	09 c0       	rjmp	.+18     	; 0x13b2 <__floatsisf+0x12>

000013a0 <__floatsisf>:
    13a0:	97 fb       	bst	r25, 7
    13a2:	3e f4       	brtc	.+14     	; 0x13b2 <__floatsisf+0x12>
    13a4:	90 95       	com	r25
    13a6:	80 95       	com	r24
    13a8:	70 95       	com	r23
    13aa:	61 95       	neg	r22
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	99 23       	and	r25, r25
    13b4:	a9 f0       	breq	.+42     	; 0x13e0 <__floatsisf+0x40>
    13b6:	f9 2f       	mov	r31, r25
    13b8:	96 e9       	ldi	r25, 0x96	; 150
    13ba:	bb 27       	eor	r27, r27
    13bc:	93 95       	inc	r25
    13be:	f6 95       	lsr	r31
    13c0:	87 95       	ror	r24
    13c2:	77 95       	ror	r23
    13c4:	67 95       	ror	r22
    13c6:	b7 95       	ror	r27
    13c8:	f1 11       	cpse	r31, r1
    13ca:	f8 cf       	rjmp	.-16     	; 0x13bc <__floatsisf+0x1c>
    13cc:	fa f4       	brpl	.+62     	; 0x140c <__floatsisf+0x6c>
    13ce:	bb 0f       	add	r27, r27
    13d0:	11 f4       	brne	.+4      	; 0x13d6 <__floatsisf+0x36>
    13d2:	60 ff       	sbrs	r22, 0
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <__floatsisf+0x6c>
    13d6:	6f 5f       	subi	r22, 0xFF	; 255
    13d8:	7f 4f       	sbci	r23, 0xFF	; 255
    13da:	8f 4f       	sbci	r24, 0xFF	; 255
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255
    13de:	16 c0       	rjmp	.+44     	; 0x140c <__floatsisf+0x6c>
    13e0:	88 23       	and	r24, r24
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <__floatsisf+0x48>
    13e4:	96 e9       	ldi	r25, 0x96	; 150
    13e6:	11 c0       	rjmp	.+34     	; 0x140a <__floatsisf+0x6a>
    13e8:	77 23       	and	r23, r23
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <__floatsisf+0x54>
    13ec:	9e e8       	ldi	r25, 0x8E	; 142
    13ee:	87 2f       	mov	r24, r23
    13f0:	76 2f       	mov	r23, r22
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <__floatsisf+0x5e>
    13f4:	66 23       	and	r22, r22
    13f6:	71 f0       	breq	.+28     	; 0x1414 <__floatsisf+0x74>
    13f8:	96 e8       	ldi	r25, 0x86	; 134
    13fa:	86 2f       	mov	r24, r22
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	2a f0       	brmi	.+10     	; 0x140c <__floatsisf+0x6c>
    1402:	9a 95       	dec	r25
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	da f7       	brpl	.-10     	; 0x1402 <__floatsisf+0x62>
    140c:	88 0f       	add	r24, r24
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	97 f9       	bld	r25, 7
    1414:	08 95       	ret

00001416 <__fp_cmp>:
    1416:	99 0f       	add	r25, r25
    1418:	00 08       	sbc	r0, r0
    141a:	55 0f       	add	r21, r21
    141c:	aa 0b       	sbc	r26, r26
    141e:	e0 e8       	ldi	r30, 0x80	; 128
    1420:	fe ef       	ldi	r31, 0xFE	; 254
    1422:	16 16       	cp	r1, r22
    1424:	17 06       	cpc	r1, r23
    1426:	e8 07       	cpc	r30, r24
    1428:	f9 07       	cpc	r31, r25
    142a:	c0 f0       	brcs	.+48     	; 0x145c <__fp_cmp+0x46>
    142c:	12 16       	cp	r1, r18
    142e:	13 06       	cpc	r1, r19
    1430:	e4 07       	cpc	r30, r20
    1432:	f5 07       	cpc	r31, r21
    1434:	98 f0       	brcs	.+38     	; 0x145c <__fp_cmp+0x46>
    1436:	62 1b       	sub	r22, r18
    1438:	73 0b       	sbc	r23, r19
    143a:	84 0b       	sbc	r24, r20
    143c:	95 0b       	sbc	r25, r21
    143e:	39 f4       	brne	.+14     	; 0x144e <__fp_cmp+0x38>
    1440:	0a 26       	eor	r0, r26
    1442:	61 f0       	breq	.+24     	; 0x145c <__fp_cmp+0x46>
    1444:	23 2b       	or	r18, r19
    1446:	24 2b       	or	r18, r20
    1448:	25 2b       	or	r18, r21
    144a:	21 f4       	brne	.+8      	; 0x1454 <__fp_cmp+0x3e>
    144c:	08 95       	ret
    144e:	0a 26       	eor	r0, r26
    1450:	09 f4       	brne	.+2      	; 0x1454 <__fp_cmp+0x3e>
    1452:	a1 40       	sbci	r26, 0x01	; 1
    1454:	a6 95       	lsr	r26
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	81 1d       	adc	r24, r1
    145a:	81 1d       	adc	r24, r1
    145c:	08 95       	ret

0000145e <__fp_inf>:
    145e:	97 f9       	bld	r25, 7
    1460:	9f 67       	ori	r25, 0x7F	; 127
    1462:	80 e8       	ldi	r24, 0x80	; 128
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	08 95       	ret

0000146a <__fp_nan>:
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	80 ec       	ldi	r24, 0xC0	; 192
    146e:	08 95       	ret

00001470 <__fp_pscA>:
    1470:	00 24       	eor	r0, r0
    1472:	0a 94       	dec	r0
    1474:	16 16       	cp	r1, r22
    1476:	17 06       	cpc	r1, r23
    1478:	18 06       	cpc	r1, r24
    147a:	09 06       	cpc	r0, r25
    147c:	08 95       	ret

0000147e <__fp_pscB>:
    147e:	00 24       	eor	r0, r0
    1480:	0a 94       	dec	r0
    1482:	12 16       	cp	r1, r18
    1484:	13 06       	cpc	r1, r19
    1486:	14 06       	cpc	r1, r20
    1488:	05 06       	cpc	r0, r21
    148a:	08 95       	ret

0000148c <__fp_round>:
    148c:	09 2e       	mov	r0, r25
    148e:	03 94       	inc	r0
    1490:	00 0c       	add	r0, r0
    1492:	11 f4       	brne	.+4      	; 0x1498 <__fp_round+0xc>
    1494:	88 23       	and	r24, r24
    1496:	52 f0       	brmi	.+20     	; 0x14ac <__fp_round+0x20>
    1498:	bb 0f       	add	r27, r27
    149a:	40 f4       	brcc	.+16     	; 0x14ac <__fp_round+0x20>
    149c:	bf 2b       	or	r27, r31
    149e:	11 f4       	brne	.+4      	; 0x14a4 <__fp_round+0x18>
    14a0:	60 ff       	sbrs	r22, 0
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <__fp_round+0x20>
    14a4:	6f 5f       	subi	r22, 0xFF	; 255
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	8f 4f       	sbci	r24, 0xFF	; 255
    14aa:	9f 4f       	sbci	r25, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <__fp_split3>:
    14ae:	57 fd       	sbrc	r21, 7
    14b0:	90 58       	subi	r25, 0x80	; 128
    14b2:	44 0f       	add	r20, r20
    14b4:	55 1f       	adc	r21, r21
    14b6:	59 f0       	breq	.+22     	; 0x14ce <__fp_splitA+0x10>
    14b8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <__fp_splitA+0x1a>
    14bc:	47 95       	ror	r20

000014be <__fp_splitA>:
    14be:	88 0f       	add	r24, r24
    14c0:	97 fb       	bst	r25, 7
    14c2:	99 1f       	adc	r25, r25
    14c4:	61 f0       	breq	.+24     	; 0x14de <__fp_splitA+0x20>
    14c6:	9f 3f       	cpi	r25, 0xFF	; 255
    14c8:	79 f0       	breq	.+30     	; 0x14e8 <__fp_splitA+0x2a>
    14ca:	87 95       	ror	r24
    14cc:	08 95       	ret
    14ce:	12 16       	cp	r1, r18
    14d0:	13 06       	cpc	r1, r19
    14d2:	14 06       	cpc	r1, r20
    14d4:	55 1f       	adc	r21, r21
    14d6:	f2 cf       	rjmp	.-28     	; 0x14bc <__fp_split3+0xe>
    14d8:	46 95       	lsr	r20
    14da:	f1 df       	rcall	.-30     	; 0x14be <__fp_splitA>
    14dc:	08 c0       	rjmp	.+16     	; 0x14ee <__fp_splitA+0x30>
    14de:	16 16       	cp	r1, r22
    14e0:	17 06       	cpc	r1, r23
    14e2:	18 06       	cpc	r1, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	f1 cf       	rjmp	.-30     	; 0x14ca <__fp_splitA+0xc>
    14e8:	86 95       	lsr	r24
    14ea:	71 05       	cpc	r23, r1
    14ec:	61 05       	cpc	r22, r1
    14ee:	08 94       	sec
    14f0:	08 95       	ret

000014f2 <__fp_zero>:
    14f2:	e8 94       	clt

000014f4 <__fp_szero>:
    14f4:	bb 27       	eor	r27, r27
    14f6:	66 27       	eor	r22, r22
    14f8:	77 27       	eor	r23, r23
    14fa:	cb 01       	movw	r24, r22
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <__gesf2>:
    1500:	8a df       	rcall	.-236    	; 0x1416 <__fp_cmp>
    1502:	08 f4       	brcc	.+2      	; 0x1506 <__gesf2+0x6>
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	08 95       	ret

00001508 <__mulsf3>:
    1508:	0b d0       	rcall	.+22     	; 0x1520 <__mulsf3x>
    150a:	c0 cf       	rjmp	.-128    	; 0x148c <__fp_round>
    150c:	b1 df       	rcall	.-158    	; 0x1470 <__fp_pscA>
    150e:	28 f0       	brcs	.+10     	; 0x151a <__mulsf3+0x12>
    1510:	b6 df       	rcall	.-148    	; 0x147e <__fp_pscB>
    1512:	18 f0       	brcs	.+6      	; 0x151a <__mulsf3+0x12>
    1514:	95 23       	and	r25, r21
    1516:	09 f0       	breq	.+2      	; 0x151a <__mulsf3+0x12>
    1518:	a2 cf       	rjmp	.-188    	; 0x145e <__fp_inf>
    151a:	a7 cf       	rjmp	.-178    	; 0x146a <__fp_nan>
    151c:	11 24       	eor	r1, r1
    151e:	ea cf       	rjmp	.-44     	; 0x14f4 <__fp_szero>

00001520 <__mulsf3x>:
    1520:	c6 df       	rcall	.-116    	; 0x14ae <__fp_split3>
    1522:	a0 f3       	brcs	.-24     	; 0x150c <__mulsf3+0x4>

00001524 <__mulsf3_pse>:
    1524:	95 9f       	mul	r25, r21
    1526:	d1 f3       	breq	.-12     	; 0x151c <__mulsf3+0x14>
    1528:	95 0f       	add	r25, r21
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	55 1f       	adc	r21, r21
    152e:	62 9f       	mul	r22, r18
    1530:	f0 01       	movw	r30, r0
    1532:	72 9f       	mul	r23, r18
    1534:	bb 27       	eor	r27, r27
    1536:	f0 0d       	add	r31, r0
    1538:	b1 1d       	adc	r27, r1
    153a:	63 9f       	mul	r22, r19
    153c:	aa 27       	eor	r26, r26
    153e:	f0 0d       	add	r31, r0
    1540:	b1 1d       	adc	r27, r1
    1542:	aa 1f       	adc	r26, r26
    1544:	64 9f       	mul	r22, r20
    1546:	66 27       	eor	r22, r22
    1548:	b0 0d       	add	r27, r0
    154a:	a1 1d       	adc	r26, r1
    154c:	66 1f       	adc	r22, r22
    154e:	82 9f       	mul	r24, r18
    1550:	22 27       	eor	r18, r18
    1552:	b0 0d       	add	r27, r0
    1554:	a1 1d       	adc	r26, r1
    1556:	62 1f       	adc	r22, r18
    1558:	73 9f       	mul	r23, r19
    155a:	b0 0d       	add	r27, r0
    155c:	a1 1d       	adc	r26, r1
    155e:	62 1f       	adc	r22, r18
    1560:	83 9f       	mul	r24, r19
    1562:	a0 0d       	add	r26, r0
    1564:	61 1d       	adc	r22, r1
    1566:	22 1f       	adc	r18, r18
    1568:	74 9f       	mul	r23, r20
    156a:	33 27       	eor	r19, r19
    156c:	a0 0d       	add	r26, r0
    156e:	61 1d       	adc	r22, r1
    1570:	23 1f       	adc	r18, r19
    1572:	84 9f       	mul	r24, r20
    1574:	60 0d       	add	r22, r0
    1576:	21 1d       	adc	r18, r1
    1578:	82 2f       	mov	r24, r18
    157a:	76 2f       	mov	r23, r22
    157c:	6a 2f       	mov	r22, r26
    157e:	11 24       	eor	r1, r1
    1580:	9f 57       	subi	r25, 0x7F	; 127
    1582:	50 40       	sbci	r21, 0x00	; 0
    1584:	8a f0       	brmi	.+34     	; 0x15a8 <__mulsf3_pse+0x84>
    1586:	e1 f0       	breq	.+56     	; 0x15c0 <__mulsf3_pse+0x9c>
    1588:	88 23       	and	r24, r24
    158a:	4a f0       	brmi	.+18     	; 0x159e <__mulsf3_pse+0x7a>
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	bb 1f       	adc	r27, r27
    1592:	66 1f       	adc	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	91 50       	subi	r25, 0x01	; 1
    159a:	50 40       	sbci	r21, 0x00	; 0
    159c:	a9 f7       	brne	.-22     	; 0x1588 <__mulsf3_pse+0x64>
    159e:	9e 3f       	cpi	r25, 0xFE	; 254
    15a0:	51 05       	cpc	r21, r1
    15a2:	70 f0       	brcs	.+28     	; 0x15c0 <__mulsf3_pse+0x9c>
    15a4:	5c cf       	rjmp	.-328    	; 0x145e <__fp_inf>
    15a6:	a6 cf       	rjmp	.-180    	; 0x14f4 <__fp_szero>
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	ec f3       	brlt	.-6      	; 0x15a6 <__mulsf3_pse+0x82>
    15ac:	98 3e       	cpi	r25, 0xE8	; 232
    15ae:	dc f3       	brlt	.-10     	; 0x15a6 <__mulsf3_pse+0x82>
    15b0:	86 95       	lsr	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	b7 95       	ror	r27
    15b8:	f7 95       	ror	r31
    15ba:	e7 95       	ror	r30
    15bc:	9f 5f       	subi	r25, 0xFF	; 255
    15be:	c1 f7       	brne	.-16     	; 0x15b0 <__mulsf3_pse+0x8c>
    15c0:	fe 2b       	or	r31, r30
    15c2:	88 0f       	add	r24, r24
    15c4:	91 1d       	adc	r25, r1
    15c6:	96 95       	lsr	r25
    15c8:	87 95       	ror	r24
    15ca:	97 f9       	bld	r25, 7
    15cc:	08 95       	ret

000015ce <_exit>:
    15ce:	f8 94       	cli

000015d0 <__stop_program>:
    15d0:	ff cf       	rjmp	.-2      	; 0x15d0 <__stop_program>
